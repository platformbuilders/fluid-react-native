# Regras do Cursor para Fluid React Native

## Padrões de Componentes

- Cada componente deve estar em seu próprio diretório em `src/components/`
- A estrutura de arquivos deve seguir o padrão:
  ```
  ComponentName/
  ├── index.tsx           # Implementação principal
  ├── styles.ts           # Estilos com styled-components
  ├── ComponentName.stories.tsx  # Documentação Storybook
  └── __tests__/          # Testes unitários
  ```
- Todos os componentes devem ser exportados em `src/components/index.ts`
- Props devem ser tipadas com interfaces específicas
- Estilização deve usar styled-components e o tema

## Convenções de Código

- Funções de componentes devem usar arrow functions
- Hooks customizados devem começar com "use"
- Testes devem usar o padrão AAA (Arrange, Act, Assert)
- Acessibilidade deve ser considerada em todos os componentes
- Prefira composição em vez de herança para reutilização

## Padrões de Estilo

- Todos os valores de cores, espaçamentos, etc. devem vir do tema
- Não utilizar valores hardcoded para estilos
- Propriedades CSS devem seguir a ordem alfabética em styled-components
- Estilização responsiva deve usar as funções de media queries do tema

## Padrões de TestIDs

- Seguir formato padronizado: `{componentType}_{id}` (ex: `button_submit`, `input_email`)
- Quando não houver `id`, usar `{componentType}_{accessibility}` como fallback
- Para casos restantes, usar `{componentType}_{componentType}` (ex: `button_button`)
- Evitar condicionais complexas ou casos especiais para geração de testIDs
- Componentes compostos devem preservar a hierarquia de testIDs
- Evitar modificar o testID original quando um componente encapsula outro
- Exceções e casos especiais devem ser explicitamente documentados no código
- Componentes que fazem o mesmo tipo de trabalho devem seguir o mesmo padrão de testID

## Testes

- Cada componente deve ter pelo menos 95% de cobertura de testes
- Testar comportamentos interativos, não apenas renderização
- Usar mocks para dependências externas
- Incluir testes de acessibilidade quando apropriado
- Verificar testIDs adequados para interação e automação de testes
- Ao modificar ou refatorar componentes, sempre verificar os testes existentes
- Ao criar snapshots, garantir que são atualizados quando o componente é modificado
- Prestar atenção especial a issues de renderização condicional (branches)
- Para aumentar cobertura de branches, certificar-se de testar todas as condições e caminhos alternativos
- Usar `data-testid` nos componentes para facilitar a seleção nos testes
- O threshold global para funções deve ser mantido acima de 84%
- Componentes com menor cobertura devem receber atenção prioritária
- Usar ferramentas como `--collectCoverageFrom` para focar em arquivos específicos durante o desenvolvimento

## Thresholds Personalizados

Para componentes com estruturas complexas que dificultam atingir os thresholds globais, configurar thresholds personalizados:

### TextInput (threshold personalizado: 80% para funções)
- Componente com lógica complexa de renderização condicional
- Múltiplas variantes (standard, bordered)
- Comportamentos de animação específicos
- Comando para testes:
  ```
  npx jest --config=jest.config.js --coverage --collectCoverageFrom="src/components/TextInput/index.tsx" src/components/TextInput/__tests__/TextInput.spec.tsx --coverageThreshold='{"./src/components/TextInput/index.tsx":{"branches":80,"functions":80,"lines":80,"statements":80}}'
  ```

### MaskedTextInput (threshold personalizado: 70% para todos os critérios)
- Manipulação complexa de máscaras e validadores
- Muitas branches de lógica condicional
- Dependências de bibliotecas externas
- Algumas funções de utilidade difíceis de testar isoladamente
- Comando para testes:
  ```
  npx jest --config=jest.config.js --coverage --collectCoverageFrom="src/components/TextInput/MaskedTextInput/index.tsx" src/components/TextInput/__tests__/MaskedTextInput.spec.tsx --coverageThreshold='{"./src/components/TextInput/MaskedTextInput/index.tsx":{"branches":70,"functions":70,"lines":70,"statements":70}}'
  ```

## Workflow de Desenvolvimento

- Desenvolver usando TDD quando possível
- Documentar novas props e comportamentos
- Atualizar Storybook ao adicionar novos recursos
- Testar em iOS e Android
- Ao atualizar o arquivo progress.md, sempre executar:
  ```
  npm run tsc
  npm run lint
  npm test
  ```
- Registrar métricas atualizadas após essas verificações
- Para executar testes de cobertura completa, usar: `yarn test --coverage`
- Para testar componentes específicos, usar: `yarn test <ComponentName>` 