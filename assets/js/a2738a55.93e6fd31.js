"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9627],{355:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"guides/best-practices","title":"Melhores Pr\xe1ticas","description":"Este guia apresenta as melhores pr\xe1ticas para trabalhar com o Fluid, ajudando voc\xea a construir aplicativos de alta qualidade, acess\xedveis e f\xe1ceis de manter.","source":"@site/docs/guides/best-practices.md","sourceDirName":"guides","slug":"/guides/best-practices","permalink":"/docs/guides/best-practices","draft":false,"unlisted":false,"editUrl":"https://github.com/platformbuilders/fluid-react-native/edit/master/website/docs/guides/best-practices.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Instala\xe7\xe3o","permalink":"/docs/installation"},"next":{"title":"Personaliza\xe7\xe3o de Temas","permalink":"/docs/theming"}}');var t=a(4848),i=a(8453);const o={sidebar_position:1},r="Melhores Pr\xe1ticas",l={},d=[{value:"Estrutura do Projeto",id:"estrutura-do-projeto",level:2},{value:"Organiza\xe7\xe3o de Componentes",id:"organiza\xe7\xe3o-de-componentes",level:3},{value:"Componentes Compostos",id:"componentes-compostos",level:3},{value:"Uso de Temas",id:"uso-de-temas",level:2},{value:"Crie Vari\xe1veis de Tema",id:"crie-vari\xe1veis-de-tema",level:3},{value:"Crie Hooks Personalizados para Estilos",id:"crie-hooks-personalizados-para-estilos",level:3},{value:"Performance",id:"performance",level:2},{value:"Memoiza\xe7\xe3o",id:"memoiza\xe7\xe3o",level:3},{value:"Otimizando Listas",id:"otimizando-listas",level:3},{value:"Evite Renderiza\xe7\xf5es Aninhadas",id:"evite-renderiza\xe7\xf5es-aninhadas",level:3},{value:"Acessibilidade",id:"acessibilidade",level:2},{value:"Labels Descritivos",id:"labels-descritivos",level:3},{value:"Teste com Leitores de Tela",id:"teste-com-leitores-de-tela",level:3},{value:"Agrupe Elementos Relacionados",id:"agrupe-elementos-relacionados",level:3},{value:"Testabilidade",id:"testabilidade",level:2},{value:"Use TestIDs",id:"use-testids",level:3},{value:"Componentes Puros",id:"componentes-puros",level:3},{value:"Testes Unit\xe1rios",id:"testes-unit\xe1rios",level:3},{value:"Reutiliza\xe7\xe3o de C\xf3digo",id:"reutiliza\xe7\xe3o-de-c\xf3digo",level:2},{value:"Hooks Personalizados",id:"hooks-personalizados",level:3},{value:"Higher-Order Components (HOCs)",id:"higher-order-components-hocs",level:3},{value:"Estiliza\xe7\xe3o Consistente",id:"estiliza\xe7\xe3o-consistente",level:2},{value:"Use o Sistema de Espa\xe7amento",id:"use-o-sistema-de-espa\xe7amento",level:3},{value:"Adapte-se a Diferentes Tamanhos de Tela",id:"adapte-se-a-diferentes-tamanhos-de-tela",level:3},{value:"Integra\xe7\xe3o com Outras Bibliotecas",id:"integra\xe7\xe3o-com-outras-bibliotecas",level:2},{value:"Formik",id:"formik",level:3},{value:"Redux/Context API",id:"reduxcontext-api",level:3},{value:"Gerenciamento de Depend\xeancias",id:"gerenciamento-de-depend\xeancias",level:2},{value:"Mantenha Depend\xeancias Atualizadas",id:"mantenha-depend\xeancias-atualizadas",level:3},{value:"Minimize o N\xfamero de Depend\xeancias",id:"minimize-o-n\xfamero-de-depend\xeancias",level:3},{value:"Conclus\xe3o",id:"conclus\xe3o",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"melhores-pr\xe1ticas",children:"Melhores Pr\xe1ticas"})}),"\n",(0,t.jsx)(n.p,{children:"Este guia apresenta as melhores pr\xe1ticas para trabalhar com o Fluid, ajudando voc\xea a construir aplicativos de alta qualidade, acess\xedveis e f\xe1ceis de manter."}),"\n",(0,t.jsx)(n.h2,{id:"estrutura-do-projeto",children:"Estrutura do Projeto"}),"\n",(0,t.jsx)(n.h3,{id:"organiza\xe7\xe3o-de-componentes",children:"Organiza\xe7\xe3o de Componentes"}),"\n",(0,t.jsx)(n.p,{children:"Recomendamos organizar seus componentes em uma estrutura clara:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"src/\n\u251c\u2500\u2500 components/         # Componentes reutiliz\xe1veis\n\u251c\u2500\u2500 screens/            # Telas do aplicativo\n\u251c\u2500\u2500 navigation/         # Configura\xe7\xe3o de navega\xe7\xe3o\n\u251c\u2500\u2500 hooks/              # Hooks personalizados\n\u251c\u2500\u2500 utils/              # Fun\xe7\xf5es utilit\xe1rias\n\u251c\u2500\u2500 services/           # Servi\xe7os e APIs\n\u251c\u2500\u2500 context/            # Providers de contexto\n\u2514\u2500\u2500 theme/              # Configura\xe7\xf5es de tema\n"})}),"\n",(0,t.jsx)(n.h3,{id:"componentes-compostos",children:"Componentes Compostos"}),"\n",(0,t.jsx)(n.p,{children:"Para componentes complexos, crie subcomponentes para partes espec\xedficas:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'// Componente principal\nconst Form = ({ children, ...props }) => { \n  return <View {...props}>{children}</View>; \n};\n\n// Subcomponentes\nForm.Header = ({ title }) => <Text>{title}</Text>;\nForm.Input = ({ label, ...props }) => <TextInput label={label} {...props} />;\nForm.Button = ({ label, ...props }) => <Button label={label} {...props} />;\n\n// Uso\n<Form>\n  <Form.Header title="Registro" />\n  <Form.Input label="Nome" />\n  <Form.Input label="Email" />\n  <Form.Button label="Enviar" />\n</Form>\n'})}),"\n",(0,t.jsx)(n.h2,{id:"uso-de-temas",children:"Uso de Temas"}),"\n",(0,t.jsx)(n.h3,{id:"crie-vari\xe1veis-de-tema",children:"Crie Vari\xe1veis de Tema"}),"\n",(0,t.jsx)(n.p,{children:"Em vez de hardcoded values, sempre use o sistema de temas:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"// \u274c Evite\n<View style={{ \n  backgroundColor: '#FFFFFF',\n  padding: 16,\n  borderRadius: 8,\n}}>\n  <Text style={{ color: '#333333', fontSize: 16 }}>\n    Conte\xfado\n  </Text>\n</View>\n\n// \u2705 Recomendado\n<View style={{ \n  backgroundColor: theme.colors.background.primary,\n  padding: theme.spacing.md,\n  borderRadius: theme.borders.radius.md,\n}}>\n  <Text style={{ \n    color: theme.colors.text.primary, \n    fontSize: theme.typography.fontSize.md \n  }}>\n    Conte\xfado\n  </Text>\n</View>\n"})}),"\n",(0,t.jsx)(n.h3,{id:"crie-hooks-personalizados-para-estilos",children:"Crie Hooks Personalizados para Estilos"}),"\n",(0,t.jsx)(n.p,{children:"Para estilos complexos ou repetitivos, crie hooks:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"// hooks/useStyles.js\nimport { useTheme } from '@platformbuilders/fluid-react-native';\n\nexport const useCardStyles = () => {\n  const theme = useTheme();\n  \n  return {\n    container: {\n      backgroundColor: theme.colors.background.primary,\n      padding: theme.spacing.md,\n      borderRadius: theme.borders.radius.md,\n      ...theme.elevations.md,\n    },\n    title: {\n      color: theme.colors.text.primary,\n      fontSize: theme.typography.fontSize.lg,\n      fontFamily: theme.typography.fontFamily.bold,\n      marginBottom: theme.spacing.sm,\n    },\n    content: {\n      color: theme.colors.text.secondary,\n      fontSize: theme.typography.fontSize.md,\n      fontFamily: theme.typography.fontFamily.regular,\n    },\n  };\n};\n\n// Uso\nconst MyComponent = () => {\n  const styles = useCardStyles();\n  \n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>T\xedtulo</Text>\n      <Text style={styles.content}>Conte\xfado</Text>\n    </View>\n  );\n};\n"})}),"\n",(0,t.jsx)(n.h2,{id:"performance",children:"Performance"}),"\n",(0,t.jsx)(n.h3,{id:"memoiza\xe7\xe3o",children:"Memoiza\xe7\xe3o"}),"\n",(0,t.jsxs)(n.p,{children:["Use ",(0,t.jsx)(n.code,{children:"React.memo"})," para componentes que renderizam frequentemente com as mesmas props:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import React from 'react';\nimport { Text } from '@platformbuilders/fluid-react-native';\n\nconst ExpensiveComponent = ({ value }) => {\n  console.log('Rendering ExpensiveComponent');\n  // Opera\xe7\xe3o custosa\n  return <Text>{value}</Text>;\n};\n\n// Memoizado - s\xf3 rerenderiza se as props mudarem\nexport default React.memo(ExpensiveComponent);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"otimizando-listas",children:"Otimizando Listas"}),"\n",(0,t.jsxs)(n.p,{children:["Para listas longas, use ",(0,t.jsx)(n.code,{children:"FlatList"})," com otimiza\xe7\xf5es:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import React, { useCallback } from 'react';\nimport { FlatList } from 'react-native';\nimport { ListItem } from '@platformbuilders/fluid-react-native';\n\nconst OptimizedList = ({ data }) => {\n  // Fun\xe7\xe3o memoizada para evitar recria\xe7\xf5es\n  const renderItem = useCallback(({ item }) => (\n    <ListItem \n      title={item.title}\n      subtitle={item.subtitle}\n    />\n  ), []);\n  \n  // Extrator de chave memoizado\n  const keyExtractor = useCallback((item) => item.id, []);\n  \n  return (\n    <FlatList\n      data={data}\n      renderItem={renderItem}\n      keyExtractor={keyExtractor}\n      // Otimiza\xe7\xf5es de desempenho\n      initialNumToRender={10}\n      maxToRenderPerBatch={10}\n      windowSize={5}\n      removeClippedSubviews={true}\n    />\n  );\n};\n\nexport default OptimizedList;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"evite-renderiza\xe7\xf5es-aninhadas",children:"Evite Renderiza\xe7\xf5es Aninhadas"}),"\n",(0,t.jsx)(n.p,{children:"Prefira componentes planos em vez de aninhamentos profundos:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"// \u274c Evite aninhamentos profundos\n<View>\n  <View>\n    <View>\n      <View>\n        <Text>Conte\xfado muito aninhado</Text>\n      </View>\n    </View>\n  </View>\n</View>\n\n// \u2705 Prefira estruturas mais planas\n<View style={containerStyle}>\n  <Text>Conte\xfado com menos aninhamento</Text>\n</View>\n"})}),"\n",(0,t.jsx)(n.h2,{id:"acessibilidade",children:"Acessibilidade"}),"\n",(0,t.jsx)(n.h3,{id:"labels-descritivos",children:"Labels Descritivos"}),"\n",(0,t.jsx)(n.p,{children:"Sempre forne\xe7a labels de acessibilidade claros:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'// \u274c Evite\n<TouchableOpacity onPress={onShare}>\n  <Icon name="share" />\n</TouchableOpacity>\n\n// \u2705 Recomendado\n<TouchableOpacity \n  onPress={onShare}\n  accessibilityLabel="Compartilhar publica\xe7\xe3o"\n  accessibilityRole="button"\n>\n  <Icon name="share" />\n</TouchableOpacity>\n'})}),"\n",(0,t.jsx)(n.h3,{id:"teste-com-leitores-de-tela",children:"Teste com Leitores de Tela"}),"\n",(0,t.jsx)(n.p,{children:"Teste regularmente sua aplica\xe7\xe3o com VoiceOver (iOS) e TalkBack (Android)."}),"\n",(0,t.jsx)(n.h3,{id:"agrupe-elementos-relacionados",children:"Agrupe Elementos Relacionados"}),"\n",(0,t.jsx)(n.p,{children:"Agrupe elementos relacionados para leitores de tela:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'<View\n  accessible={true}\n  accessibilityLabel="Pontua\xe7\xe3o: 4.5 estrelas de 5"\n>\n  <StarRating rating={4.5} />\n  <Text>4.5/5</Text>\n</View>\n'})}),"\n",(0,t.jsx)(n.h2,{id:"testabilidade",children:"Testabilidade"}),"\n",(0,t.jsx)(n.h3,{id:"use-testids",children:"Use TestIDs"}),"\n",(0,t.jsx)(n.p,{children:"Adicione testIDs para facilitar testes automatizados:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'<Button \n  label="Enviar" \n  onPress={handleSubmit}\n  testID="submit_button"\n/>\n'})}),"\n",(0,t.jsx)(n.h3,{id:"componentes-puros",children:"Componentes Puros"}),"\n",(0,t.jsx)(n.p,{children:"Mantenha seus componentes puros e previs\xedveis:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"// \u274c Evite efeitos colaterais imprevis\xedveis\nconst ImpureComponent = ({ data }) => {\n  // N\xe3o fa\xe7a isso dentro do componente\n  fetch('https://api.example.com')\n    .then(response => response.json())\n    .then(result => console.log(result));\n  \n  return <Text>{data}</Text>;\n};\n\n// \u2705 Recomendado - componente puro, previs\xedvel\nconst PureComponent = ({ data, onFetch }) => {\n  useEffect(() => {\n    if (onFetch) {\n      onFetch();\n    }\n  }, [onFetch]);\n  \n  return <Text>{data}</Text>;\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"testes-unit\xe1rios",children:"Testes Unit\xe1rios"}),"\n",(0,t.jsx)(n.p,{children:"Escreva testes unit\xe1rios para componentes e l\xf3gica:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"// Button.test.tsx\nimport React from 'react';\nimport { render, fireEvent } from '@testing-library/react-native';\nimport { Button } from '@platformbuilders/fluid-react-native';\n\ndescribe('Button', () => {\n  it('renders correctly with label', () => {\n    const { getByText } = render(\n      <Button label=\"Teste\" onPress={() => {}} />\n    );\n    expect(getByText('Teste')).toBeTruthy();\n  });\n  \n  it('calls onPress when pressed', () => {\n    const onPress = jest.fn();\n    const { getByText } = render(\n      <Button label=\"Teste\" onPress={onPress} />\n    );\n    \n    fireEvent.press(getByText('Teste'));\n    expect(onPress).toHaveBeenCalledTimes(1);\n  });\n  \n  it('displays loading indicator when loading', () => {\n    const { getByTestId, queryByText } = render(\n      <Button label=\"Teste\" onPress={() => {}} loading />\n    );\n    \n    expect(getByTestId('loading_indicator')).toBeTruthy();\n    expect(queryByText('Teste')).toBeNull();\n  });\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"reutiliza\xe7\xe3o-de-c\xf3digo",children:"Reutiliza\xe7\xe3o de C\xf3digo"}),"\n",(0,t.jsx)(n.h3,{id:"hooks-personalizados",children:"Hooks Personalizados"}),"\n",(0,t.jsx)(n.p,{children:"Crie hooks para l\xf3gica reutiliz\xe1vel:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"// hooks/useForm.js\nimport { useState, useCallback } from 'react';\n\nexport const useForm = (initialValues = {}) => {\n  const [values, setValues] = useState(initialValues);\n  const [errors, setErrors] = useState({});\n  \n  const handleChange = useCallback((field, value) => {\n    setValues(prev => ({ ...prev, [field]: value }));\n    // Limpar erro quando o campo \xe9 alterado\n    setErrors(prev => ({ ...prev, [field]: undefined }));\n  }, []);\n  \n  const validate = useCallback((validationRules) => {\n    const newErrors = {};\n    let isValid = true;\n    \n    Object.keys(validationRules).forEach(field => {\n      const value = values[field];\n      const error = validationRules[field](value, values);\n      \n      if (error) {\n        newErrors[field] = error;\n        isValid = false;\n      }\n    });\n    \n    setErrors(newErrors);\n    return isValid;\n  }, [values]);\n  \n  return {\n    values,\n    errors,\n    handleChange,\n    validate,\n    reset: () => setValues(initialValues),\n  };\n};\n\n// Uso\nconst LoginScreen = () => {\n  const { values, errors, handleChange, validate } = useForm({\n    email: '',\n    password: '',\n  });\n  \n  const handleSubmit = () => {\n    const isValid = validate({\n      email: value => !value ? 'Email \xe9 obrigat\xf3rio' : null,\n      password: value => !value ? 'Senha \xe9 obrigat\xf3ria' : null,\n    });\n    \n    if (isValid) {\n      // L\xf3gica de login\n    }\n  };\n  \n  return (\n    <View>\n      <TextInput\n        label=\"Email\"\n        value={values.email}\n        error={errors.email}\n        onChangeText={(text) => handleChange('email', text)}\n      />\n      <TextInput\n        label=\"Senha\"\n        value={values.password}\n        error={errors.password}\n        secureTextEntry\n        onChangeText={(text) => handleChange('password', text)}\n      />\n      <Button label=\"Entrar\" onPress={handleSubmit} />\n    </View>\n  );\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"higher-order-components-hocs",children:"Higher-Order Components (HOCs)"}),"\n",(0,t.jsx)(n.p,{children:"Use HOCs para adicionar funcionalidades a componentes existentes:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"// withLoading.tsx\nimport React from 'react';\nimport { View, ActivityIndicator } from 'react-native';\n\nexport const withLoading = (Component) => {\n  return ({ isLoading, ...props }) => {\n    if (isLoading) {\n      return (\n        <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n          <ActivityIndicator size=\"large\" color=\"#0000ff\" />\n        </View>\n      );\n    }\n    \n    return <Component {...props} />;\n  };\n};\n\n// Uso\nconst UserProfile = ({ user }) => (\n  <View>\n    <Text>{user.name}</Text>\n    <Text>{user.email}</Text>\n  </View>\n);\n\nconst UserProfileWithLoading = withLoading(UserProfile);\n\n// Na tela\n<UserProfileWithLoading \n  isLoading={loading}\n  user={userData}\n/>\n"})}),"\n",(0,t.jsx)(n.h2,{id:"estiliza\xe7\xe3o-consistente",children:"Estiliza\xe7\xe3o Consistente"}),"\n",(0,t.jsx)(n.h3,{id:"use-o-sistema-de-espa\xe7amento",children:"Use o Sistema de Espa\xe7amento"}),"\n",(0,t.jsx)(n.p,{children:"Mantenha margens e paddings consistentes usando o sistema de espa\xe7amento:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"// \u274c Evite valores arbitr\xe1rios\n<View style={{ margin: 17, padding: 23 }}>\n  <Text>Conte\xfado</Text>\n</View>\n\n// \u2705 Use o sistema de espa\xe7amento\n<View style={{ \n  margin: theme.spacing.md, \n  padding: theme.spacing.lg \n}}>\n  <Text>Conte\xfado</Text>\n</View>\n"})}),"\n",(0,t.jsx)(n.h3,{id:"adapte-se-a-diferentes-tamanhos-de-tela",children:"Adapte-se a Diferentes Tamanhos de Tela"}),"\n",(0,t.jsx)(n.p,{children:"Use estilos responsivos:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { useWindowDimensions } from 'react-native';\nimport { useTheme } from '@platformbuilders/fluid-react-native';\n\nconst ResponsiveLayout = ({ children }) => {\n  const { width } = useWindowDimensions();\n  const theme = useTheme();\n  \n  // Determine o layout baseado na largura\n  const isTablet = width >= theme.breakpoints.tablet;\n  \n  return (\n    <View style={{ \n      flexDirection: isTablet ? 'row' : 'column',\n      padding: isTablet ? theme.spacing.lg : theme.spacing.md,\n    }}>\n      {children}\n    </View>\n  );\n};\n"})}),"\n",(0,t.jsx)(n.h2,{id:"integra\xe7\xe3o-com-outras-bibliotecas",children:"Integra\xe7\xe3o com Outras Bibliotecas"}),"\n",(0,t.jsx)(n.h3,{id:"formik",children:"Formik"}),"\n",(0,t.jsx)(n.p,{children:"Integrando com Formik para gerenciamento de formul\xe1rios:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import React from 'react';\nimport { View } from 'react-native';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { TextInput, Button } from '@platformbuilders/fluid-react-native';\n\n// Schema de valida\xe7\xe3o com Yup\nconst validationSchema = Yup.object().shape({\n  name: Yup.string().required('Nome \xe9 obrigat\xf3rio'),\n  email: Yup.string()\n    .email('Email inv\xe1lido')\n    .required('Email \xe9 obrigat\xf3rio'),\n  password: Yup.string()\n    .min(6, 'Senha deve ter pelo menos 6 caracteres')\n    .required('Senha \xe9 obrigat\xf3ria'),\n});\n\nconst SignupForm = () => {\n  return (\n    <Formik\n      initialValues={{ name: '', email: '', password: '' }}\n      validationSchema={validationSchema}\n      onSubmit={(values) => console.log(values)}\n    >\n      {({\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        values,\n        errors,\n        touched,\n        isSubmitting,\n      }) => (\n        <View>\n          <TextInput\n            label=\"Nome\"\n            value={values.name}\n            onChangeText={handleChange('name')}\n            onBlur={handleBlur('name')}\n            error={touched.name && errors.name}\n          />\n          \n          <TextInput\n            label=\"Email\"\n            value={values.email}\n            onChangeText={handleChange('email')}\n            onBlur={handleBlur('email')}\n            error={touched.email && errors.email}\n            keyboardType=\"email-address\"\n            autoCapitalize=\"none\"\n          />\n          \n          <TextInput\n            label=\"Senha\"\n            value={values.password}\n            onChangeText={handleChange('password')}\n            onBlur={handleBlur('password')}\n            error={touched.password && errors.password}\n            secureTextEntry\n          />\n          \n          <Button\n            label=\"Cadastrar\"\n            onPress={handleSubmit}\n            loading={isSubmitting}\n          />\n        </View>\n      )}\n    </Formik>\n  );\n};\n\nexport default SignupForm;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"reduxcontext-api",children:"Redux/Context API"}),"\n",(0,t.jsx)(n.p,{children:"Integrando com gerenciamento de estado:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import React, { createContext, useContext, useReducer } from 'react';\n\n// Criando contexto\nconst AppContext = createContext();\n\n// Reducer\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_USER':\n      return { ...state, user: action.payload };\n    case 'LOGOUT':\n      return { ...state, user: null };\n    default:\n      return state;\n  }\n};\n\n// Provider\nexport const AppProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, {\n    user: null,\n  });\n  \n  return (\n    <AppContext.Provider value={{ state, dispatch }}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\n// Hook personalizado para usar o contexto\nexport const useApp = () => {\n  const context = useContext(AppContext);\n  \n  if (!context) {\n    throw new Error('useApp deve ser usado dentro de um AppProvider');\n  }\n  \n  return context;\n};\n\n// Uso com componentes Fluid\nimport { Button, Text } from '@platformbuilders/fluid-react-native';\n\nconst ProfileScreen = () => {\n  const { state, dispatch } = useApp();\n  \n  const handleLogout = () => {\n    dispatch({ type: 'LOGOUT' });\n  };\n  \n  return (\n    <View>\n      {state.user ? (\n        <>\n          <Text>Ol\xe1, {state.user.name}</Text>\n          <Button label=\"Logout\" onPress={handleLogout} />\n        </>\n      ) : (\n        <Text>Fa\xe7a login para continuar</Text>\n      )}\n    </View>\n  );\n};\n"})}),"\n",(0,t.jsx)(n.h2,{id:"gerenciamento-de-depend\xeancias",children:"Gerenciamento de Depend\xeancias"}),"\n",(0,t.jsx)(n.h3,{id:"mantenha-depend\xeancias-atualizadas",children:"Mantenha Depend\xeancias Atualizadas"}),"\n",(0,t.jsx)(n.p,{children:"Atualize regularmente suas depend\xeancias para obter corre\xe7\xf5es de bugs e melhorias:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Verificar depend\xeancias desatualizadas\nnpm outdated\n\n# Atualizar depend\xeancias\nnpm update\n\n# Para atualiza\xe7\xf5es de vers\xe3o principal\nnpx npm-check-updates -u\nnpm install\n"})}),"\n",(0,t.jsx)(n.h3,{id:"minimize-o-n\xfamero-de-depend\xeancias",children:"Minimize o N\xfamero de Depend\xeancias"}),"\n",(0,t.jsx)(n.p,{children:"Avalie cuidadosamente cada depend\xeancia antes de adicion\xe1-la:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"O Fluid j\xe1 fornece muitos componentes comuns"}),"\n",(0,t.jsx)(n.li,{children:"Para funcionalidades simples, considere implement\xe1-las voc\xea mesmo"}),"\n",(0,t.jsx)(n.li,{children:"Verifique o tamanho e a manuten\xe7\xe3o de cada depend\xeancia"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"conclus\xe3o",children:"Conclus\xe3o"}),"\n",(0,t.jsx)(n.p,{children:"Seguindo estas melhores pr\xe1ticas, voc\xea poder\xe1 construir aplicativos React Native mais eficientes, acess\xedveis e f\xe1ceis de manter usando o Fluid. Lembre-se de que essas diretrizes devem ser adaptadas ao contexto espec\xedfico do seu projeto."})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>r});var s=a(6540);const t={},i=s.createContext(t);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);