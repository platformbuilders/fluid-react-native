"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[598],{8453:(e,r,n)=>{n.d(r,{R:()=>t,x:()=>a});var o=n(6540);const i={},s=o.createContext(i);function t(e){const r=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),o.createElement(s.Provider,{value:r},e.children)}},8830:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>t,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"components/form-error/index","title":"FormError","description":"O componente FormError \xe9 utilizado para exibir mensagens de erro em formul\xe1rios. Ele \xe9 projetado para ser flex\xedvel, podendo envolver outros componentes de formul\xe1rio e exibir mensagens de erro de forma consistente.","source":"@site/docs/components/form-error/index.md","sourceDirName":"components/form-error","slug":"/components/form-error/","permalink":"/fluid-react-native/docs/components/form-error/","draft":false,"unlisted":false,"editUrl":"https://github.com/platformbuilders/fluid-react-native/edit/master/website/docs/components/form-error/index.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"componentsSidebar","previous":{"title":"DatePicker","permalink":"/fluid-react-native/docs/components/date-picker/"},"next":{"title":"PinInput","permalink":"/fluid-react-native/docs/components/pin-input/"}}');var i=n(4848),s=n(8453);const t={sidebar_position:5},a="FormError",l={},d=[{value:"Importa\xe7\xe3o",id:"importa\xe7\xe3o",level:2},{value:"Exemplo B\xe1sico",id:"exemplo-b\xe1sico",level:2},{value:"Exemplos",id:"exemplos",level:2},{value:"Como Wrapper de Componentes",id:"como-wrapper-de-componentes",level:3},{value:"Estilos Diferentes",id:"estilos-diferentes",level:3},{value:"M\xfaltiplos Erros no Mesmo Formul\xe1rio",id:"m\xfaltiplos-erros-no-mesmo-formul\xe1rio",level:3},{value:"Erros de Formul\xe1rio Gen\xe9ricos",id:"erros-de-formul\xe1rio-gen\xe9ricos",level:3},{value:"API",id:"api",level:2},{value:"Props",id:"props",level:3},{value:"Acessibilidade",id:"acessibilidade",level:2},{value:"Boas Pr\xe1ticas",id:"boas-pr\xe1ticas",level:3},{value:"Notas Importantes",id:"notas-importantes",level:2},{value:"Exemplo Completo",id:"exemplo-completo",level:2}];function c(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"formerror",children:"FormError"})}),"\n",(0,i.jsx)(r.p,{children:"O componente FormError \xe9 utilizado para exibir mensagens de erro em formul\xe1rios. Ele \xe9 projetado para ser flex\xedvel, podendo envolver outros componentes de formul\xe1rio e exibir mensagens de erro de forma consistente."}),"\n",(0,i.jsx)(r.h2,{id:"importa\xe7\xe3o",children:"Importa\xe7\xe3o"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-tsx",children:"import { FormError } from '@platformbuilders/fluid-react-native';\n"})}),"\n",(0,i.jsx)(r.h2,{id:"exemplo-b\xe1sico",children:"Exemplo B\xe1sico"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-tsx",children:"import React from 'react';\nimport { View } from 'react-native';\nimport { FormError } from '@platformbuilders/fluid-react-native';\n\nconst BasicFormErrorExample = () => (\n  <View>\n    <FormError\n      id=\"username-error\"\n      accessibility=\"nome-usuario\"\n      error=\"O nome de usu\xe1rio \xe9 obrigat\xf3rio\"\n    />\n  </View>\n);\n"})}),"\n",(0,i.jsx)(r.h2,{id:"exemplos",children:"Exemplos"}),"\n",(0,i.jsx)(r.h3,{id:"como-wrapper-de-componentes",children:"Como Wrapper de Componentes"}),"\n",(0,i.jsx)(r.p,{children:"O FormError pode ser usado como um wrapper para componentes de formul\xe1rio, exibindo a mensagem de erro apenas quando necess\xe1rio:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-tsx",children:"import React, { useState } from 'react';\nimport { View } from 'react-native';\nimport { FormError, TextInput } from '@platformbuilders/fluid-react-native';\n\nconst FormWithValidation = () => {\n  const [username, setUsername] = useState('');\n  const [error, setError] = useState('');\n  \n  const handleChange = (value) => {\n    setUsername(value);\n    if (value.length < 3) {\n      setError('O nome de usu\xe1rio deve ter pelo menos 3 caracteres');\n    } else {\n      setError('');\n    }\n  };\n  \n  return (\n    <View>\n      <FormError\n        id=\"username-field\"\n        accessibility=\"campo-usuario\"\n        error={error}\n      >\n        <TextInput\n          id=\"username\"\n          accessibility=\"entrada-usuario\"\n          label=\"Nome de Usu\xe1rio\"\n          value={username}\n          onChangeText={handleChange}\n        />\n      </FormError>\n    </View>\n  );\n};\n"})}),"\n",(0,i.jsx)(r.h3,{id:"estilos-diferentes",children:"Estilos Diferentes"}),"\n",(0,i.jsx)(r.p,{children:"O FormError oferece algumas varia\xe7\xf5es de estilo:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-tsx",children:'// Erro centralizado\n<FormError\n  id="centered-error"\n  accessibility="erro-centralizado"\n  error="Este erro est\xe1 centralizado"\n  centered\n/>\n\n// Erro com texto maior\n<FormError\n  id="large-error"\n  accessibility="erro-grande"\n  error="Este erro tem tamanho maior"\n  large\n/>\n\n// Erro com estilo personalizado\n<FormError\n  id="custom-error"\n  accessibility="erro-personalizado"\n  error="Erro personalizado"\n  style={{ color: \'#8B0000\', fontWeight: \'bold\' }}\n/>\n'})}),"\n",(0,i.jsx)(r.h3,{id:"m\xfaltiplos-erros-no-mesmo-formul\xe1rio",children:"M\xfaltiplos Erros no Mesmo Formul\xe1rio"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-tsx",children:'import React from \'react\';\nimport { View, StyleSheet } from \'react-native\';\nimport { FormError, TextInput } from \'@platformbuilders/fluid-react-native\';\n\nconst MultipleErrorsForm = () => (\n  <View style={styles.container}>\n    <FormError\n      id="email-field"\n      accessibility="campo-email"\n      error="E-mail inv\xe1lido"\n    >\n      <TextInput\n        id="email"\n        accessibility="entrada-email"\n        label="E-mail"\n        value="email@invalido"\n      />\n    </FormError>\n    \n    <View style={styles.spacing} />\n    \n    <FormError\n      id="password-field"\n      accessibility="campo-senha"\n      error="Senha muito curta"\n    >\n      <TextInput\n        id="password"\n        accessibility="entrada-senha"\n        label="Senha"\n        value="123"\n        secureTextEntry\n      />\n    </FormError>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 16,\n  },\n  spacing: {\n    height: 16,\n  },\n});\n'})}),"\n",(0,i.jsx)(r.h3,{id:"erros-de-formul\xe1rio-gen\xe9ricos",children:"Erros de Formul\xe1rio Gen\xe9ricos"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-tsx",children:'// Erro geral do formul\xe1rio\n<FormError\n  id="login_error"\n  accessibility="erro-login"\n  error="Credenciais inv\xe1lidas"\n/>\n\n// Usando o id padr\xe3o "form_error", vai gerar testID: "error_form_error"\n<FormError\n  error="Erro no formul\xe1rio"\n/>\n'})}),"\n",(0,i.jsx)(r.h2,{id:"api",children:"API"}),"\n",(0,i.jsx)(r.h3,{id:"props",children:"Props"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Prop"}),(0,i.jsx)(r.th,{children:"Tipo"}),(0,i.jsx)(r.th,{children:"Padr\xe3o"}),(0,i.jsx)(r.th,{children:"Descri\xe7\xe3o"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"id"})}),(0,i.jsx)(r.td,{children:"string"}),(0,i.jsx)(r.td,{children:"'form_error'"}),(0,i.jsx)(r.td,{children:"ID \xfanico para o componente"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"accessibility"})}),(0,i.jsx)(r.td,{children:"string"}),(0,i.jsx)(r.td,{children:"-"}),(0,i.jsx)(r.td,{children:"Identificador para acessibilidade"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"error"})}),(0,i.jsx)(r.td,{children:"string | string[] | boolean"}),(0,i.jsx)(r.td,{children:"''"}),(0,i.jsx)(r.td,{children:"Mensagem de erro para exibir"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"centered"})}),(0,i.jsx)(r.td,{children:"boolean"}),(0,i.jsx)(r.td,{children:"false"}),(0,i.jsx)(r.td,{children:"Se a mensagem de erro deve ser centralizada"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"large"})}),(0,i.jsx)(r.td,{children:"boolean"}),(0,i.jsx)(r.td,{children:"false"}),(0,i.jsx)(r.td,{children:"Se a mensagem de erro deve ter tamanho maior"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"style"})}),(0,i.jsx)(r.td,{children:"StyleProp<TextStyle>"}),(0,i.jsx)(r.td,{children:"-"}),(0,i.jsx)(r.td,{children:"Estilos adicionais para o texto de erro"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"children"})}),(0,i.jsx)(r.td,{children:"ReactNode"}),(0,i.jsx)(r.td,{children:"-"}),(0,i.jsx)(r.td,{children:"Componentes filhos (normalmente campos de formul\xe1rio)"})]})]})]}),"\n",(0,i.jsx)(r.h2,{id:"acessibilidade",children:"Acessibilidade"}),"\n",(0,i.jsx)(r.p,{children:"O FormError implementa propriedades de acessibilidade autom\xe1ticas:"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"testID"}),": Gerado como ",(0,i.jsx)(r.code,{children:"error_${id}"}),", onde ",(0,i.jsx)(r.code,{children:"id"})," \xe9 o ID fornecido ou o valor padr\xe3o 'form_error'"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"accessibilityLabel"}),': Prefixado com "Erro " seguido pelo ',(0,i.jsx)(r.code,{children:"accessibility"})," ou pelo texto do erro"]}),"\n",(0,i.jsx)(r.li,{children:"O componente \xe9 projetado para ser claro e leg\xedvel para leitores de tela"}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"boas-pr\xe1ticas",children:"Boas Pr\xe1ticas"}),"\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Mensagens claras e espec\xedficas"}),": Forne\xe7a mensagens de erro que expliquem claramente o problema"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Associe erros aos campos"}),": Use FormError como wrapper de campos de formul\xe1rio para associar visualmente o erro ao campo"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Contraste adequado"}),": O texto de erro usa a cor de perigo (danger) do tema para m\xe1xima visibilidade"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Posicionamento coerente"}),": Mantenha um padr\xe3o consistente no posicionamento dos erros"]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"notas-importantes",children:"Notas Importantes"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["Se ",(0,i.jsx)(r.code,{children:"error"})," for um valor booleano ",(0,i.jsx)(r.code,{children:"true"}),", um aviso ser\xe1 exibido no console e nenhum texto de erro ser\xe1 renderizado"]}),"\n",(0,i.jsxs)(r.li,{children:["Quando ",(0,i.jsx)(r.code,{children:"error"})," \xe9 uma string vazia, falso ou indefinido, nenhum texto de erro \xe9 exibido"]}),"\n",(0,i.jsx)(r.li,{children:"O componente \xe9 projetado para trabalhar com a hierarquia de formul\xe1rios do Fluid React Native"}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"exemplo-completo",children:"Exemplo Completo"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-tsx",children:"import React, { useState } from 'react';\nimport { SafeAreaView, StyleSheet, View, Text } from 'react-native';\nimport { FormError, TextInput, Button } from '@platformbuilders/fluid-react-native';\n\nconst ContactForm = () => {\n  const [form, setForm] = useState({ name: '', email: '', message: '' });\n  const [errors, setErrors] = useState({});\n  const [submitted, setSubmitted] = useState(false);\n  \n  const updateField = (field, value) => {\n    setForm(prev => ({ ...prev, [field]: value }));\n    \n    // Valida\xe7\xe3o b\xe1sica\n    if (field === 'email' && value && !/\\S+@\\S+\\.\\S+/.test(value)) {\n      setErrors(prev => ({ ...prev, [field]: 'E-mail inv\xe1lido' }));\n    } else if (value === '') {\n      setErrors(prev => ({ ...prev, [field]: 'Campo obrigat\xf3rio' }));\n    } else {\n      setErrors(prev => ({ ...prev, [field]: '' }));\n    }\n  };\n  \n  const handleSubmit = () => {\n    const newErrors = {};\n    let hasError = false;\n    \n    // Validar todos os campos\n    Object.entries(form).forEach(([field, value]) => {\n      if (field === 'email' && !/\\S+@\\S+\\.\\S+/.test(value)) {\n        newErrors[field] = 'E-mail inv\xe1lido';\n        hasError = true;\n      } else if (!value) {\n        newErrors[field] = 'Campo obrigat\xf3rio';\n        hasError = true;\n      }\n    });\n    \n    if (hasError) {\n      setErrors(newErrors);\n    } else {\n      setSubmitted(true);\n    }\n  };\n  \n  return (\n    <SafeAreaView style={styles.container}>\n      <Text style={styles.title}>Formul\xe1rio de Contato</Text>\n      \n      {submitted ? (\n        <View style={styles.successContainer}>\n          <Text style={styles.successText}>\n            Mensagem enviada com sucesso!\n          </Text>\n          <Button\n            id=\"new-message\"\n            accessibility=\"nova-mensagem\"\n            title=\"Enviar nova mensagem\"\n            onPress={() => {\n              setForm({ name: '', email: '', message: '' });\n              setErrors({});\n              setSubmitted(false);\n            }}\n          />\n        </View>\n      ) : (\n        <View style={styles.form}>\n          <FormError\n            id=\"name-field\"\n            accessibility=\"campo-nome\"\n            error={errors.name}\n          >\n            <TextInput\n              id=\"name-input\"\n              accessibility=\"entrada-nome\"\n              label=\"Nome Completo\"\n              value={form.name}\n              onChangeText={(value) => updateField('name', value)}\n            />\n          </FormError>\n          \n          <View style={styles.spacing} />\n          \n          <FormError\n            id=\"email-field\"\n            accessibility=\"campo-email\"\n            error={errors.email}\n          >\n            <TextInput\n              id=\"email-input\"\n              accessibility=\"entrada-email\"\n              label=\"E-mail\"\n              value={form.email}\n              onChangeText={(value) => updateField('email', value)}\n              keyboardType=\"email-address\"\n              autoCapitalize=\"none\"\n            />\n          </FormError>\n          \n          <View style={styles.spacing} />\n          \n          <FormError\n            id=\"message-field\"\n            accessibility=\"campo-mensagem\"\n            error={errors.message}\n          >\n            <TextInput\n              id=\"message-input\"\n              accessibility=\"entrada-mensagem\"\n              label=\"Mensagem\"\n              value={form.message}\n              onChangeText={(value) => updateField('message', value)}\n              multiline\n              numberOfLines={4}\n            />\n          </FormError>\n          \n          <View style={styles.spacing} />\n          \n          <Button\n            id=\"submit\"\n            accessibility=\"enviar-formulario\"\n            title=\"Enviar mensagem\"\n            onPress={handleSubmit}\n          />\n        </View>\n      )}\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 16,\n    backgroundColor: '#f5f5f5',\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 24,\n    textAlign: 'center',\n  },\n  form: {\n    backgroundColor: '#ffffff',\n    padding: 16,\n    borderRadius: 8,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 2,\n  },\n  spacing: {\n    height: 16,\n  },\n  successContainer: {\n    backgroundColor: '#ffffff',\n    padding: 16,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  successText: {\n    fontSize: 18,\n    color: '#4CAF50',\n    marginBottom: 16,\n    textAlign: 'center',\n  },\n}); \n"})})]})}function m(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);