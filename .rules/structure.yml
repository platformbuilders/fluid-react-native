rules:
  - id: no-class-in-components
    languages: [javascript, typescript]
    message: 'Evite usar classes em componentes. Use funções ou hooks.'
    severity: WARNING
    patterns:
      - pattern-regex: "class\\s?\\w+\\sextends"
    paths:
      exclude:
        - '*.json'
        - 'src/components/PinInput/lib/react-native-smooth-pincode-input/index.d.ts'
    metadata:
      description: 'Essa regra evita o uso de classes em componentes React. A abordagem funcional com hooks é recomendada para garantir código mais simples e fácil de manter.'
      tags: ['classes', 'componentes', 'react']

  - id: use-enum-instead-of-string-comparisons
    languages: [javascript, typescript]
    message: 'Use ENUM para comparações em vez de strings. Comparar strings diretamente torna o código menos escalável e mais suscetível a erros.'
    severity: WARNING
    patterns:
      - pattern-regex: '(("|'').+("|'') (===|!==|>=|<=|>|<|=>|=<))|(===|!==|>=|<=|>|<|=>|=<) ("|'').+("|'')'
    paths:
      exclude:
        - '*.json'
        - '*.test.tsx'
        - '**/**/svg/*'
        - 'src/components/FormError/index.tsx'
        - 'src/components/Image/index.tsx'
    metadata:
      description: 'Esta regra sugere o uso de ENUMs em vez de comparações diretas por string. O uso de ENUMs torna o código mais escalável e reduz a chance de erros em comparações lógicas.'
      tags: ['comparações', 'enum', 'strings']

  - id: use-specific-response-type-instead-of-axiosresponse
    languages: [javascript, typescript]
    message: 'Indique o tipo de dado retornado em vez de utilizar `AxiosResponse` diretamente. Isso ajuda a prever o formato dos dados e garante maior segurança de tipos.'
    severity: WARNING
    patterns:
      - pattern-regex: "\\s?(Promise<AxiosResponse>|AxiosResponse)"
    paths:
      exclude:
        - '*.json'
        - 'src/api/interceptors/*'
    metadata:
      description: 'Esta regra sugere o uso de tipos de dados específicos no lugar de `AxiosResponse` ao trabalhar com Axios. Usar tipos claros ajuda a melhorar a previsibilidade e a segurança dos dados retornados.'
      tags: ['axios', 'tipagem', 'promises']

  - id: return-only-request-data
    languages: [javascript, typescript]
    message: 'Sempre retorne diretamente o data da requisição: `const { data } = await request`. Isso simplifica o manuseio de respostas.'
    severity: WARNING
    patterns:
      - pattern-regex: "return\\s+await\\s+request\\.[\\w]+\\("
    paths:
      exclude:
        - '*.json'
    metadata:
      description: 'Ao retornar respostas de requisições, sempre extraia e retorne o `data` diretamente, garantindo que o código seja mais simples e focado nos dados retornados pela requisição.'
      tags: ['request', 'axios', 'data', 'async', 'await']

  - id: prefer-type-for-simple-types
    languages: [javascript, typescript]
    message: 'Prefira o uso de Type para definição de tipos simples e união de tipos. Use Interface para objetos ou quando precisar de extensão.'
    severity: WARNING
    patterns:
      - pattern-regex: "interface\\s+\\w+\\s+{\\s*[^extends].*Props.*"
    paths:
      exclude:
        - '*.json'
    metadata:
      description: 'Recomenda-se o uso de Type para criação de tipos simples ou união de tipos em TypeScript. Interface ainda pode ser usada para definir a estrutura de objetos ou quando é necessária extensão.'
      tags: ['typescript', 'types', 'interface', 'props', 'type']

  - id: use-custom-touchable-component
    languages: [javascript, typescript]
    message: 'Sempre utilize o componente personalizado Touchable em vez de TouchableOpacity, TouchableHighlight ou Pressable diretamente.'
    severity: WARNING
    patterns:
      - pattern-regex: "styled\\.(TouchableOpacity|TouchableHighlight|Pressable)"
    paths:
      exclude:
        - '*.json'
    metadata:
      description: 'Para garantir consistência de comportamento e estilos, utilize o componente customizado Touchable no lugar dos componentes nativos TouchableOpacity, TouchableHighlight ou Pressable.'
      tags: ['styles', 'touchable', 'components', 'custom-components']

  - id: use-array-syntax-instead-of-array-generic
    languages: [javascript, typescript]
    message: "Utilize '[]' em vez de 'Array<>' para definir tipos de arrays."
    severity: WARNING
    patterns:
      - pattern-regex: 'Array<.*>'
    paths:
      exclude:
        - '*.json'
    metadata:
      description: "Prefira a notação '[]' para definir tipos de arrays em TypeScript, em vez da sintaxe genérica 'Array<>'. A notação de array é mais legível e comum."
      tags: ['types', 'array', 'typescript']

  - id: use-await-instead-of-then
    languages: [javascript, typescript]
    message: "Utilize 'await' em vez de '.then()' para lidar com Promises. Isso torna o código mais conciso e legível."
    severity: WARNING
    patterns:
      - pattern-regex: ".*\\.then\\(.*\\).*"
    paths:
      exclude:
        - '*.json'
        - '*.spec.ts'
        - '*.spec.js'
        - '*.cy.ts'
    metadata:
      description: "Prefira usar 'await' em vez de '.then()' ao lidar com Promises, tornando o código mais simples e fácil de ler. Async/await é a abordagem mais moderna e recomendada."
      tags: ['async', 'await', 'promises']

  - id: api-call-only-in-stores
    languages: [javascript, typescript]
    message: 'Todas as chamadas de API devem ser feitas a partir do diretório /api e consumidas nas Stores para simplificar o fluxo de dados, facilitar o debug e promover a reutilização de dados no state.'
    severity: WARNING
    patterns:
      - pattern-either:
          - pattern-regex: "import\\s?{.*}\\s?from\\s?['\"]~\\/api['\"];"
          - pattern-regex: "\\.\\s*(get|post|put|delete)\\s*\\(\\s*[`'\"].*\\/.*[`'\"].*\\)"
          - pattern-regex: "Api\\."
    paths:
      exclude:
        - '*.store.ts'
        - '*.api.ts'
        - '*.mock.ts'
        - '*.test.ts'
        - '*.spec.ts'

    metadata:
      description: 'As chamadas de API devem ser feitas no diretório /api e consumidas exclusivamente dentro das Stores. Isso proporciona simplificação do fluxo de dados, facilidade de debug e reutilização eficiente de dados no state. Além disso, essa abordagem melhora a organização e a escalabilidade do código.'
      tags: ['api', 'store', 'architecture', 'import', 'post', 'get']

  - id: avoid-long-functions
    languages: [javascript, typescript]
    message: 'Funções com mais de 50 linhas devem ser refatoradas para melhorar a legibilidade e modularidade.'
    severity: WARNING
    patterns:
      - pattern-regex: "function\\s+\\w+\\(.*\\)\\s*{((?:[^}]*\\n){50,})"
    metadata:
      description: 'Funções muito longas podem ser difíceis de entender e manter. Recomendado refatorar funções com mais de 50 linhas.'
      tags: ['function', 'modularity', 'readability']

  - id: avoid-global-variables
    languages: [javascript, typescript]
    message: 'Evite variáveis globais. Prefira escopo local ou modularização.'
    severity: WARNING
    patterns:
      - pattern-regex: "var\\s+\\w+\\s*=\\s*.*;"
    paths:
      exclude:
        - '*.module.ts'
    metadata:
      description: 'Variáveis globais podem causar conflitos em grandes aplicações. Prefira usar escopo local ou módulos.'
      tags: ['variables', 'global', 'modularity']

  - id: avoid-too-many-parameters
    languages: [javascript, typescript]
    message: 'Funções com mais de 3 parâmetros devem ser simplificadas. Prefira passar um objeto com as propriedades.'
    severity: WARNING
    patterns:
      - pattern-regex: "function\\s+\\w+\\([^,]{4,}\\)"
    paths:
      exclude:
        - '*/navigation/*'
    metadata:
      description: 'Funções com muitos parâmetros são difíceis de ler e manter. Prefira passar um objeto para maior clareza.'
      tags: ['function', 'parameters', 'modularity']

  - id: avoid-single-letter-variables
    languages: [javascript, typescript]
    message: 'Evite usar nomes de variáveis de uma única letra. Prefira nomes mais descritivos.'
    severity: WARNING
    patterns:
      - pattern-regex: "(var|let|const)\\s+[a-zA-Z]\\s?=.*;"
    paths:
      exclude:
        - '*.json'
        - '*.test.*'
        - '*.spec.*'
    metadata:
      description: 'Nomes de variáveis de uma única letra reduzem a legibilidade. Use nomes mais descritivos, exceto em loops simples.'
      tags: ['variables', 'naming', 'readability']

  - id: ensure-accessibility-utils-import
    languages: [javascript, typescript]
    message: 'Componentes interativos devem importar e utilizar os utilitários de acessibilidade.'
    severity: WARNING
    patterns:
      - pattern-regex: "(import\\s+React).*(?!(import\\s+{.*generateAccessibilityProps.*}\\s+from\\s+['\"].*utils['\"]))"
    paths:
      include:
        - 'src/components/**/index.tsx'
      exclude:
        - '*.json'
        - 'src/components/Typography/**'
        - 'src/components/Icon/**'
        - 'src/components/Separator/**'
    metadata:
      description: 'Componentes interativos devem importar e utilizar os utilitários de acessibilidade para garantir uma implementação consistente das propriedades de acessibilidade.'
      tags: ['acessibilidade', 'componentes', 'utilitários', 'importação']
