// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Accordion /> should render Accordion 1`] = `
<View>
  <View
    style={Object {}}
  >
    <View
      accessible={true}
      collapsable={false}
      focusable={true}
      nativeID="animatedComponent"
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        isActive={false}
      >
        <Text
          isActive={false}
        >
          Mock
        </Text>
      </View>
    </View>
    <View
      collapsable={false}
      nativeID="animatedComponent"
      pointerEvents="none"
      style={
        Object {
          "height": 0,
          "overflow": "hidden",
        }
      }
    >
      <View
        collapsable={false}
        forwardedRef={[Function]}
        nativeID="animatedComponent"
        onLayout={[Function]}
        style={Object {}}
      >
        <View>
          <Text>
            Mock Content
          </Text>
        </View>
      </View>
    </View>
  </View>
</View>
`;

exports[`<Accordion /> should render Accordion with body custom 1`] = `
<View>
  <View
    style={Object {}}
  >
    <View
      accessible={true}
      collapsable={false}
      focusable={true}
      nativeID="animatedComponent"
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        isActive={false}
      >
        <Text
          isActive={false}
        >
          Mock
        </Text>
      </View>
    </View>
    <View
      collapsable={false}
      nativeID="animatedComponent"
      pointerEvents="none"
      style={
        Object {
          "height": 0,
          "overflow": "hidden",
        }
      }
    >
      <View
        collapsable={false}
        forwardedRef={[Function]}
        nativeID="animatedComponent"
        onLayout={[Function]}
        style={Object {}}
      >
        <View>
          <Text
            accessibility="Unity Test"
            accessibilityLabel="Unity Test"
            lineHeightVariant="min"
            style={
              Array [
                Object {
                  "color": "#000000",
                  "fontSize": 15,
                  "lineHeight": 15,
                },
              ]
            }
            testID="Unity Test"
            variant="md"
          >
            Unity Test
          </Text>
        </View>
      </View>
    </View>
  </View>
</View>
`;

exports[`<Accordion /> should render Accordion with content custom 1`] = `
<View>
  <View
    style={Object {}}
  >
    <View
      accessible={true}
      collapsable={false}
      focusable={true}
      nativeID="animatedComponent"
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        isActive={false}
      >
        <Text
          isActive={false}
        >
          Mock
        </Text>
      </View>
    </View>
    <View
      collapsable={false}
      nativeID="animatedComponent"
      pointerEvents="none"
      style={
        Object {
          "height": 0,
          "overflow": "hidden",
        }
      }
    >
      <View
        collapsable={false}
        forwardedRef={[Function]}
        nativeID="animatedComponent"
        onLayout={[Function]}
        style={Object {}}
      >
        <View
          style={
            Array [
              Object {},
              Object {
                "backgroundColor": "#f1c40f",
              },
            ]
          }
        />
      </View>
    </View>
  </View>
</View>
`;

exports[`<Accordion /> should render Accordion with header custom 1`] = `
<View>
  <View
    style={Object {}}
  >
    <View
      accessible={true}
      collapsable={false}
      focusable={true}
      nativeID="animatedComponent"
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        style={
          Array [
            Object {},
            Object {
              "backgroundColor": "#27ae60",
            },
          ]
        }
      />
    </View>
    <View
      collapsable={false}
      nativeID="animatedComponent"
      pointerEvents="none"
      style={
        Object {
          "height": 0,
          "overflow": "hidden",
        }
      }
    >
      <View
        collapsable={false}
        forwardedRef={[Function]}
        nativeID="animatedComponent"
        onLayout={[Function]}
        style={Object {}}
      >
        <View>
          <Text>
            Mock Content
          </Text>
        </View>
      </View>
    </View>
  </View>
</View>
`;

exports[`<Accordion /> should render Accordion with icon 1`] = `
<View>
  <View
    style={Object {}}
  >
    <View
      accessible={true}
      collapsable={false}
      focusable={true}
      nativeID="animatedComponent"
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        isActive={false}
      >
        <Text
          isActive={false}
        >
          Mock
        </Text>
        <View
          collapsable={false}
          nativeID="animatedComponent"
          style={Object {}}
        >
          <View
            accessibilityLabel="Abrir"
            accessibilityState={
              Object {
                "disabled": true,
              }
            }
            accessible={true}
            collapsable={false}
            focusable={true}
            nativeID="animatedComponent"
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "opacity": 1,
              }
            }
            testID="chevron-up"
          >
            <View>
              <Text
                allowFontScaling={false}
                style={
                  Array [
                    Object {
                      "color": undefined,
                      "fontSize": 37.714285714285715,
                    },
                    undefined,
                    Object {
                      "fontFamily": "Material Design Icons",
                      "fontStyle": "normal",
                      "fontWeight": "normal",
                    },
                    Object {},
                  ]
                }
              >
                ó°…€
              </Text>
            </View>
          </View>
        </View>
      </View>
    </View>
    <View
      collapsable={false}
      nativeID="animatedComponent"
      pointerEvents="none"
      style={
        Object {
          "height": 0,
          "overflow": "hidden",
        }
      }
    >
      <View
        collapsable={false}
        forwardedRef={[Function]}
        nativeID="animatedComponent"
        onLayout={[Function]}
        style={Object {}}
      >
        <View>
          <Text>
            Mock Content
          </Text>
        </View>
      </View>
    </View>
  </View>
</View>
`;

exports[`<Accordion /> should render Accordion with icon color grey inactive 1`] = `
<View>
  <View
    style={Object {}}
  >
    <View
      accessible={true}
      collapsable={false}
      focusable={true}
      nativeID="animatedComponent"
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        isActive={false}
      >
        <Text
          isActive={false}
        >
          Mock
        </Text>
        <View
          collapsable={false}
          nativeID="animatedComponent"
          style={Object {}}
        >
          <View
            accessibilityLabel="Abrir"
            accessibilityState={
              Object {
                "disabled": true,
              }
            }
            accessible={true}
            collapsable={false}
            focusable={true}
            nativeID="animatedComponent"
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "opacity": 1,
              }
            }
            testID="chevron-up"
          >
            <View>
              <Text
                allowFontScaling={false}
                style={
                  Array [
                    Object {
                      "color": "#95a5a6",
                      "fontSize": 37.714285714285715,
                    },
                    undefined,
                    Object {
                      "fontFamily": "Material Design Icons",
                      "fontStyle": "normal",
                      "fontWeight": "normal",
                    },
                    Object {},
                  ]
                }
              >
                ó°…€
              </Text>
            </View>
          </View>
        </View>
      </View>
    </View>
    <View
      collapsable={false}
      nativeID="animatedComponent"
      pointerEvents="none"
      style={
        Object {
          "height": 0,
          "overflow": "hidden",
        }
      }
    >
      <View
        collapsable={false}
        forwardedRef={[Function]}
        nativeID="animatedComponent"
        onLayout={[Function]}
        style={Object {}}
      >
        <View>
          <Text>
            Mock Content
          </Text>
        </View>
      </View>
    </View>
  </View>
</View>
`;

exports[`<Accordion /> should render Accordion with icon color red 1`] = `
<View>
  <View
    style={Object {}}
  >
    <View
      accessible={true}
      collapsable={false}
      focusable={true}
      nativeID="animatedComponent"
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        isActive={false}
      >
        <Text
          isActive={false}
        >
          Mock
        </Text>
        <View
          collapsable={false}
          nativeID="animatedComponent"
          style={Object {}}
        >
          <View
            accessibilityLabel="Abrir"
            accessibilityState={
              Object {
                "disabled": true,
              }
            }
            accessible={true}
            collapsable={false}
            focusable={true}
            nativeID="animatedComponent"
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "opacity": 1,
              }
            }
            testID="chevron-up"
          >
            <View>
              <Text
                allowFontScaling={false}
                style={
                  Array [
                    Object {
                      "color": undefined,
                      "fontSize": 37.714285714285715,
                    },
                    undefined,
                    Object {
                      "fontFamily": "Material Design Icons",
                      "fontStyle": "normal",
                      "fontWeight": "normal",
                    },
                    Object {},
                  ]
                }
              >
                ó°…€
              </Text>
            </View>
          </View>
        </View>
      </View>
    </View>
    <View
      collapsable={false}
      nativeID="animatedComponent"
      pointerEvents="none"
      style={
        Object {
          "height": 0,
          "overflow": "hidden",
        }
      }
    >
      <View
        collapsable={false}
        forwardedRef={[Function]}
        nativeID="animatedComponent"
        onLayout={[Function]}
        style={Object {}}
      >
        <View>
          <Text>
            Mock Content
          </Text>
        </View>
      </View>
    </View>
  </View>
</View>
`;

exports[`<Accordion /> should render Accordion with icon down text custom 1`] = `
<View>
  <View
    style={Object {}}
  >
    <View
      accessible={true}
      collapsable={false}
      focusable={true}
      nativeID="animatedComponent"
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        isActive={false}
      >
        <Text
          isActive={false}
        >
          Mock
        </Text>
        <View
          collapsable={false}
          nativeID="animatedComponent"
          style={Object {}}
        >
          <View
            accessibilityLabel="Abrir"
            accessibilityState={
              Object {
                "disabled": true,
              }
            }
            accessible={true}
            collapsable={false}
            focusable={true}
            nativeID="animatedComponent"
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "opacity": 1,
              }
            }
            testID="chevron-up"
          >
            <View>
              <Text
                allowFontScaling={false}
                style={
                  Array [
                    Object {
                      "color": undefined,
                      "fontSize": 37.714285714285715,
                    },
                    undefined,
                    Object {
                      "fontFamily": "Material Design Icons",
                      "fontStyle": "normal",
                      "fontWeight": "normal",
                    },
                    Object {},
                  ]
                }
              >
                ó°…€
              </Text>
            </View>
          </View>
        </View>
      </View>
    </View>
    <View
      collapsable={false}
      nativeID="animatedComponent"
      pointerEvents="none"
      style={
        Object {
          "height": 0,
          "overflow": "hidden",
        }
      }
    >
      <View
        collapsable={false}
        forwardedRef={[Function]}
        nativeID="animatedComponent"
        onLayout={[Function]}
        style={Object {}}
      >
        <View>
          <Text>
            Mock Content
          </Text>
        </View>
      </View>
    </View>
  </View>
</View>
`;

exports[`<Accordion /> should render Accordion with icon up text custom 1`] = `
<View>
  <View
    style={Object {}}
  >
    <View
      accessible={true}
      collapsable={false}
      focusable={true}
      nativeID="animatedComponent"
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        isActive={false}
      >
        <Text
          isActive={false}
        >
          Mock
        </Text>
        <View
          collapsable={false}
          nativeID="animatedComponent"
          style={Object {}}
        >
          <View
            accessibilityLabel="Abrir"
            accessibilityState={
              Object {
                "disabled": true,
              }
            }
            accessible={true}
            collapsable={false}
            focusable={true}
            nativeID="animatedComponent"
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "opacity": 1,
              }
            }
            testID="chevron-up"
          >
            <View>
              <Text
                allowFontScaling={false}
                style={
                  Array [
                    Object {
                      "color": undefined,
                      "fontSize": 37.714285714285715,
                    },
                    undefined,
                    Object {
                      "fontFamily": "Material Design Icons",
                      "fontStyle": "normal",
                      "fontWeight": "normal",
                    },
                    Object {},
                  ]
                }
              >
                ó°…€
              </Text>
            </View>
          </View>
        </View>
      </View>
    </View>
    <View
      collapsable={false}
      nativeID="animatedComponent"
      pointerEvents="none"
      style={
        Object {
          "height": 0,
          "overflow": "hidden",
        }
      }
    >
      <View
        collapsable={false}
        forwardedRef={[Function]}
        nativeID="animatedComponent"
        onLayout={[Function]}
        style={Object {}}
      >
        <View>
          <Text>
            Mock Content
          </Text>
        </View>
      </View>
    </View>
  </View>
</View>
`;

exports[`<Accordion /> should render Accordion with markdown 1`] = `
<View>
  <View
    style={Object {}}
  >
    <View
      accessible={true}
      collapsable={false}
      focusable={true}
      nativeID="animatedComponent"
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        isActive={false}
      >
        <Text
          isActive={false}
        >
          Mock
        </Text>
      </View>
    </View>
    <View
      collapsable={false}
      nativeID="animatedComponent"
      pointerEvents="none"
      style={
        Object {
          "height": 0,
          "overflow": "hidden",
        }
      }
    >
      <View
        collapsable={false}
        forwardedRef={[Function]}
        nativeID="animatedComponent"
        onLayout={[Function]}
        style={Object {}}
      >
        <View>
          <View
            style={Object {}}
          >
            <View
              style={
                Object {
                  "alignItems": "flex-start",
                  "flexDirection": "row",
                  "flexWrap": "wrap",
                  "justifyContent": "flex-start",
                  "marginBottom": 10,
                  "marginTop": 10,
                  "width": "100%",
                }
              }
            >
              <Text
                style={Object {}}
              >
                <Text
                  style={
                    Array [
                      Object {},
                      Object {},
                    ]
                  }
                >
                  Mock Content
                </Text>
              </Text>
            </View>
          </View>
        </View>
      </View>
    </View>
  </View>
</View>
`;

exports[`<Accordion /> should render Accordion with onChange function 1`] = `
<View>
  <View
    style={Object {}}
  >
    <View
      accessible={true}
      collapsable={false}
      focusable={true}
      nativeID="animatedComponent"
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        isActive={false}
      >
        <Text
          isActive={false}
        >
          Mock
        </Text>
      </View>
    </View>
    <View
      collapsable={false}
      nativeID="animatedComponent"
      pointerEvents="none"
      style={
        Object {
          "height": 0,
          "overflow": "hidden",
        }
      }
    >
      <View
        collapsable={false}
        forwardedRef={[Function]}
        nativeID="animatedComponent"
        onLayout={[Function]}
        style={Object {}}
      >
        <View>
          <Text>
            Mock Content
          </Text>
        </View>
      </View>
    </View>
  </View>
</View>
`;

exports[`<Accordion /> should render Accordion with title custom 1`] = `
<View>
  <View
    style={Object {}}
  >
    <View
      accessible={true}
      collapsable={false}
      focusable={true}
      nativeID="animatedComponent"
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        isActive={false}
      >
        <Text
          accessibility="Unity Test"
          accessibilityLabel="Unity Test"
          lineHeightVariant="min"
          style={
            Array [
              Object {
                "color": "#000000",
                "fontSize": 15,
                "lineHeight": 15,
              },
            ]
          }
          testID="Unity Test"
          variant="md"
        >
          Unity Test
        </Text>
      </View>
    </View>
    <View
      collapsable={false}
      nativeID="animatedComponent"
      pointerEvents="none"
      style={
        Object {
          "height": 0,
          "overflow": "hidden",
        }
      }
    >
      <View
        collapsable={false}
        forwardedRef={[Function]}
        nativeID="animatedComponent"
        onLayout={[Function]}
        style={Object {}}
      >
        <View>
          <Text>
            Mock Content
          </Text>
        </View>
      </View>
    </View>
  </View>
</View>
`;
