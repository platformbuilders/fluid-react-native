// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Accordion /> should render Accordion 1`] = `
<View>
  <View
    style={{}}
  >
    <View
      accessibilityState={
        {
          "busy": undefined,
          "checked": undefined,
          "disabled": undefined,
          "expanded": false,
          "selected": undefined,
        }
      }
      accessibilityValue={
        {
          "max": undefined,
          "min": undefined,
          "now": undefined,
          "text": undefined,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        {
          "opacity": 1,
        }
      }
    >
      <View
        isActive={false}
      >
        <Text
          isActive={false}
        >
          Mock
        </Text>
      </View>
    </View>
    <View
      collapsable={false}
      pointerEvents="none"
      style={
        {
          "height": 0,
          "overflow": "hidden",
        }
      }
    >
      <View
        collapsable={false}
        onLayout={[Function]}
        style={{}}
      >
        <View>
          <Text>
            Mock Content
          </Text>
        </View>
      </View>
    </View>
  </View>
</View>
`;

exports[`<Accordion /> should render Accordion with body custom 1`] = `
<View>
  <View
    style={{}}
  >
    <View
      accessibilityState={
        {
          "busy": undefined,
          "checked": undefined,
          "disabled": undefined,
          "expanded": false,
          "selected": undefined,
        }
      }
      accessibilityValue={
        {
          "max": undefined,
          "min": undefined,
          "now": undefined,
          "text": undefined,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        {
          "opacity": 1,
        }
      }
    >
      <View
        isActive={false}
      >
        <Text
          isActive={false}
        >
          Mock
        </Text>
      </View>
    </View>
    <View
      collapsable={false}
      pointerEvents="none"
      style={
        {
          "height": 0,
          "overflow": "hidden",
        }
      }
    >
      <View
        collapsable={false}
        onLayout={[Function]}
        style={{}}
      >
        <View>
          <Text
            accessibilityLabel="Unity Test"
            lineHeightVariant="min"
            style={
              [
                {
                  "color": "#444444",
                  "fontSize": 15,
                  "lineHeight": 18,
                },
              ]
            }
            testID="Unity Test"
            variant="md"
          >
            Unity Test
          </Text>
        </View>
      </View>
    </View>
  </View>
</View>
`;

exports[`<Accordion /> should render Accordion with content custom 1`] = `
<View>
  <View
    style={{}}
  >
    <View
      accessibilityState={
        {
          "busy": undefined,
          "checked": undefined,
          "disabled": undefined,
          "expanded": false,
          "selected": undefined,
        }
      }
      accessibilityValue={
        {
          "max": undefined,
          "min": undefined,
          "now": undefined,
          "text": undefined,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        {
          "opacity": 1,
        }
      }
    >
      <View
        isActive={false}
      >
        <Text
          isActive={false}
        >
          Mock
        </Text>
      </View>
    </View>
    <View
      collapsable={false}
      pointerEvents="none"
      style={
        {
          "height": 0,
          "overflow": "hidden",
        }
      }
    >
      <View
        collapsable={false}
        onLayout={[Function]}
        style={{}}
      >
        <View
          style={
            [
              {},
              {
                "backgroundColor": "#f1c40f",
              },
            ]
          }
        />
      </View>
    </View>
  </View>
</View>
`;

exports[`<Accordion /> should render Accordion with header custom 1`] = `
<View>
  <View
    style={{}}
  >
    <View
      accessibilityState={
        {
          "busy": undefined,
          "checked": undefined,
          "disabled": undefined,
          "expanded": false,
          "selected": undefined,
        }
      }
      accessibilityValue={
        {
          "max": undefined,
          "min": undefined,
          "now": undefined,
          "text": undefined,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        {
          "opacity": 1,
        }
      }
    >
      <View
        style={
          [
            {},
            {
              "backgroundColor": "#27ae60",
            },
          ]
        }
      />
    </View>
    <View
      collapsable={false}
      pointerEvents="none"
      style={
        {
          "height": 0,
          "overflow": "hidden",
        }
      }
    >
      <View
        collapsable={false}
        onLayout={[Function]}
        style={{}}
      >
        <View>
          <Text>
            Mock Content
          </Text>
        </View>
      </View>
    </View>
  </View>
</View>
`;

exports[`<Accordion /> should render Accordion with icon 1`] = `
<View>
  <View
    style={{}}
  >
    <View
      accessibilityState={
        {
          "busy": undefined,
          "checked": undefined,
          "disabled": undefined,
          "expanded": false,
          "selected": undefined,
        }
      }
      accessibilityValue={
        {
          "max": undefined,
          "min": undefined,
          "now": undefined,
          "text": undefined,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        {
          "opacity": 1,
        }
      }
    >
      <View
        isActive={false}
      >
        <Text
          isActive={false}
        >
          Mock
        </Text>
        <View
          collapsable={false}
          style={{}}
        >
          <View
            accessibilityLabel="Abrir"
            accessibilityState={
              {
                "busy": undefined,
                "checked": undefined,
                "disabled": true,
                "expanded": undefined,
                "selected": undefined,
              }
            }
            accessibilityValue={
              {
                "max": undefined,
                "min": undefined,
                "now": undefined,
                "text": undefined,
              }
            }
            accessible={true}
            collapsable={false}
            focusable={true}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              {
                "opacity": 1,
              }
            }
            testID="chevron-up"
          >
            <View>
              <Text
                allowFontScaling={false}
                selectable={false}
                style={
                  [
                    {
                      "color": undefined,
                      "fontSize": 37.714285714285715,
                    },
                    undefined,
                    {
                      "fontFamily": "FontAwesome5Free-Solid",
                      "fontStyle": "normal",
                      "fontWeight": "normal",
                    },
                    {
                      "fontWeight": "900",
                    },
                  ]
                }
              >
                ÔÅ∏
              </Text>
            </View>
          </View>
        </View>
      </View>
    </View>
    <View
      collapsable={false}
      pointerEvents="none"
      style={
        {
          "height": 0,
          "overflow": "hidden",
        }
      }
    >
      <View
        collapsable={false}
        onLayout={[Function]}
        style={{}}
      >
        <View>
          <Text>
            Mock Content
          </Text>
        </View>
      </View>
    </View>
  </View>
</View>
`;

exports[`<Accordion /> should render Accordion with icon color grey inactive 1`] = `
<View>
  <View
    style={{}}
  >
    <View
      accessibilityState={
        {
          "busy": undefined,
          "checked": undefined,
          "disabled": undefined,
          "expanded": false,
          "selected": undefined,
        }
      }
      accessibilityValue={
        {
          "max": undefined,
          "min": undefined,
          "now": undefined,
          "text": undefined,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        {
          "opacity": 1,
        }
      }
    >
      <View
        isActive={false}
      >
        <Text
          isActive={false}
        >
          Mock
        </Text>
        <View
          collapsable={false}
          style={{}}
        >
          <View
            accessibilityLabel="Abrir"
            accessibilityState={
              {
                "busy": undefined,
                "checked": undefined,
                "disabled": true,
                "expanded": undefined,
                "selected": undefined,
              }
            }
            accessibilityValue={
              {
                "max": undefined,
                "min": undefined,
                "now": undefined,
                "text": undefined,
              }
            }
            accessible={true}
            collapsable={false}
            focusable={true}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              {
                "opacity": 1,
              }
            }
            testID="chevron-up"
          >
            <View>
              <Text
                allowFontScaling={false}
                selectable={false}
                style={
                  [
                    {
                      "color": "#95a5a6",
                      "fontSize": 37.714285714285715,
                    },
                    undefined,
                    {
                      "fontFamily": "FontAwesome5Free-Solid",
                      "fontStyle": "normal",
                      "fontWeight": "normal",
                    },
                    {
                      "fontWeight": "900",
                    },
                  ]
                }
              >
                ÔÅ∏
              </Text>
            </View>
          </View>
        </View>
      </View>
    </View>
    <View
      collapsable={false}
      pointerEvents="none"
      style={
        {
          "height": 0,
          "overflow": "hidden",
        }
      }
    >
      <View
        collapsable={false}
        onLayout={[Function]}
        style={{}}
      >
        <View>
          <Text>
            Mock Content
          </Text>
        </View>
      </View>
    </View>
  </View>
</View>
`;

exports[`<Accordion /> should render Accordion with icon color red 1`] = `
<View>
  <View
    style={{}}
  >
    <View
      accessibilityState={
        {
          "busy": undefined,
          "checked": undefined,
          "disabled": undefined,
          "expanded": false,
          "selected": undefined,
        }
      }
      accessibilityValue={
        {
          "max": undefined,
          "min": undefined,
          "now": undefined,
          "text": undefined,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        {
          "opacity": 1,
        }
      }
    >
      <View
        isActive={false}
      >
        <Text
          isActive={false}
        >
          Mock
        </Text>
        <View
          collapsable={false}
          style={{}}
        >
          <View
            accessibilityLabel="Abrir"
            accessibilityState={
              {
                "busy": undefined,
                "checked": undefined,
                "disabled": true,
                "expanded": undefined,
                "selected": undefined,
              }
            }
            accessibilityValue={
              {
                "max": undefined,
                "min": undefined,
                "now": undefined,
                "text": undefined,
              }
            }
            accessible={true}
            collapsable={false}
            focusable={true}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              {
                "opacity": 1,
              }
            }
            testID="chevron-up"
          >
            <View>
              <Text
                allowFontScaling={false}
                selectable={false}
                style={
                  [
                    {
                      "color": undefined,
                      "fontSize": 37.714285714285715,
                    },
                    undefined,
                    {
                      "fontFamily": "FontAwesome5Free-Solid",
                      "fontStyle": "normal",
                      "fontWeight": "normal",
                    },
                    {
                      "fontWeight": "900",
                    },
                  ]
                }
              >
                ÔÅ∏
              </Text>
            </View>
          </View>
        </View>
      </View>
    </View>
    <View
      collapsable={false}
      pointerEvents="none"
      style={
        {
          "height": 0,
          "overflow": "hidden",
        }
      }
    >
      <View
        collapsable={false}
        onLayout={[Function]}
        style={{}}
      >
        <View>
          <Text>
            Mock Content
          </Text>
        </View>
      </View>
    </View>
  </View>
</View>
`;

exports[`<Accordion /> should render Accordion with icon down text custom 1`] = `
<View>
  <View
    style={{}}
  >
    <View
      accessibilityState={
        {
          "busy": undefined,
          "checked": undefined,
          "disabled": undefined,
          "expanded": false,
          "selected": undefined,
        }
      }
      accessibilityValue={
        {
          "max": undefined,
          "min": undefined,
          "now": undefined,
          "text": undefined,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        {
          "opacity": 1,
        }
      }
    >
      <View
        isActive={false}
      >
        <Text
          isActive={false}
        >
          Mock
        </Text>
        <View
          collapsable={false}
          style={{}}
        >
          <View
            accessibilityLabel="Abrir"
            accessibilityState={
              {
                "busy": undefined,
                "checked": undefined,
                "disabled": true,
                "expanded": undefined,
                "selected": undefined,
              }
            }
            accessibilityValue={
              {
                "max": undefined,
                "min": undefined,
                "now": undefined,
                "text": undefined,
              }
            }
            accessible={true}
            collapsable={false}
            focusable={true}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              {
                "opacity": 1,
              }
            }
            testID="chevron-up"
          >
            <View>
              <Text
                allowFontScaling={false}
                selectable={false}
                style={
                  [
                    {
                      "color": undefined,
                      "fontSize": 37.714285714285715,
                    },
                    undefined,
                    {
                      "fontFamily": "FontAwesome5Free-Solid",
                      "fontStyle": "normal",
                      "fontWeight": "normal",
                    },
                    {
                      "fontWeight": "900",
                    },
                  ]
                }
              >
                ÔÅ∏
              </Text>
            </View>
          </View>
        </View>
      </View>
    </View>
    <View
      collapsable={false}
      pointerEvents="none"
      style={
        {
          "height": 0,
          "overflow": "hidden",
        }
      }
    >
      <View
        collapsable={false}
        onLayout={[Function]}
        style={{}}
      >
        <View>
          <Text>
            Mock Content
          </Text>
        </View>
      </View>
    </View>
  </View>
</View>
`;

exports[`<Accordion /> should render Accordion with icon up text custom 1`] = `
<View>
  <View
    style={{}}
  >
    <View
      accessibilityState={
        {
          "busy": undefined,
          "checked": undefined,
          "disabled": undefined,
          "expanded": false,
          "selected": undefined,
        }
      }
      accessibilityValue={
        {
          "max": undefined,
          "min": undefined,
          "now": undefined,
          "text": undefined,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        {
          "opacity": 1,
        }
      }
    >
      <View
        isActive={false}
      >
        <Text
          isActive={false}
        >
          Mock
        </Text>
        <View
          collapsable={false}
          style={{}}
        >
          <View
            accessibilityLabel="Abrir"
            accessibilityState={
              {
                "busy": undefined,
                "checked": undefined,
                "disabled": true,
                "expanded": undefined,
                "selected": undefined,
              }
            }
            accessibilityValue={
              {
                "max": undefined,
                "min": undefined,
                "now": undefined,
                "text": undefined,
              }
            }
            accessible={true}
            collapsable={false}
            focusable={true}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              {
                "opacity": 1,
              }
            }
            testID="chevron-up"
          >
            <View>
              <Text
                allowFontScaling={false}
                selectable={false}
                style={
                  [
                    {
                      "color": undefined,
                      "fontSize": 37.714285714285715,
                    },
                    undefined,
                    {
                      "fontFamily": "FontAwesome5Free-Solid",
                      "fontStyle": "normal",
                      "fontWeight": "normal",
                    },
                    {
                      "fontWeight": "900",
                    },
                  ]
                }
              >
                ÔÅ∏
              </Text>
            </View>
          </View>
        </View>
      </View>
    </View>
    <View
      collapsable={false}
      pointerEvents="none"
      style={
        {
          "height": 0,
          "overflow": "hidden",
        }
      }
    >
      <View
        collapsable={false}
        onLayout={[Function]}
        style={{}}
      >
        <View>
          <Text>
            Mock Content
          </Text>
        </View>
      </View>
    </View>
  </View>
</View>
`;

exports[`<Accordion /> should render Accordion with markdown 1`] = `
<View>
  <View
    style={{}}
  >
    <View
      accessibilityState={
        {
          "busy": undefined,
          "checked": undefined,
          "disabled": undefined,
          "expanded": false,
          "selected": undefined,
        }
      }
      accessibilityValue={
        {
          "max": undefined,
          "min": undefined,
          "now": undefined,
          "text": undefined,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        {
          "opacity": 1,
        }
      }
    >
      <View
        isActive={false}
      >
        <Text
          isActive={false}
        >
          Mock
        </Text>
      </View>
    </View>
    <View
      collapsable={false}
      pointerEvents="none"
      style={
        {
          "height": 0,
          "overflow": "hidden",
        }
      }
    >
      <View
        collapsable={false}
        onLayout={[Function]}
        style={{}}
      >
        <View>
          <View
            style={{}}
          >
            <View
              style={
                {
                  "alignItems": "flex-start",
                  "flexDirection": "row",
                  "flexWrap": "wrap",
                  "justifyContent": "flex-start",
                  "marginBottom": 10,
                  "marginTop": 10,
                  "width": "100%",
                }
              }
            >
              <Text
                style={{}}
              >
                <Text
                  style={
                    [
                      {},
                      {},
                    ]
                  }
                >
                  Mock Content
                </Text>
              </Text>
            </View>
          </View>
        </View>
      </View>
    </View>
  </View>
</View>
`;

exports[`<Accordion /> should render Accordion with onChange function 1`] = `
<View>
  <View
    style={{}}
  >
    <View
      accessibilityState={
        {
          "busy": undefined,
          "checked": undefined,
          "disabled": undefined,
          "expanded": false,
          "selected": undefined,
        }
      }
      accessibilityValue={
        {
          "max": undefined,
          "min": undefined,
          "now": undefined,
          "text": undefined,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        {
          "opacity": 1,
        }
      }
    >
      <View
        isActive={false}
      >
        <Text
          isActive={false}
        >
          Mock
        </Text>
      </View>
    </View>
    <View
      collapsable={false}
      pointerEvents="none"
      style={
        {
          "height": 0,
          "overflow": "hidden",
        }
      }
    >
      <View
        collapsable={false}
        onLayout={[Function]}
        style={{}}
      >
        <View>
          <Text>
            Mock Content
          </Text>
        </View>
      </View>
    </View>
  </View>
</View>
`;

exports[`<Accordion /> should render Accordion with title custom 1`] = `
<View>
  <View
    style={{}}
  >
    <View
      accessibilityState={
        {
          "busy": undefined,
          "checked": undefined,
          "disabled": undefined,
          "expanded": false,
          "selected": undefined,
        }
      }
      accessibilityValue={
        {
          "max": undefined,
          "min": undefined,
          "now": undefined,
          "text": undefined,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        {
          "opacity": 1,
        }
      }
    >
      <View
        isActive={false}
      >
        <Text
          accessibilityLabel="Unity Test"
          lineHeightVariant="min"
          style={
            [
              {
                "color": "#444444",
                "fontSize": 15,
                "lineHeight": 18,
              },
            ]
          }
          testID="Unity Test"
          variant="md"
        >
          Unity Test
        </Text>
      </View>
    </View>
    <View
      collapsable={false}
      pointerEvents="none"
      style={
        {
          "height": 0,
          "overflow": "hidden",
        }
      }
    >
      <View
        collapsable={false}
        onLayout={[Function]}
        style={{}}
      >
        <View>
          <Text>
            Mock Content
          </Text>
        </View>
      </View>
    </View>
  </View>
</View>
`;
