// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Avatar /> should handle file:// URI scheme correctly 1`] = `
<View
  accessibilityLabel=""
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": true,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={false}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    {
      "borderColor": "#4255EF",
      "borderRadius": 25,
      "borderWidth": 2,
      "height": 50,
      "opacity": 1,
      "overflow": "hidden",
      "position": "relative",
      "width": 50,
    }
  }
  testID="testing"
/>
`;

exports[`<Avatar /> should handle invalid URI correctly 1`] = `
<View
  accessibilityLabel=""
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": true,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={false}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    {
      "borderColor": "#4255EF",
      "borderRadius": 25,
      "borderWidth": 2,
      "height": 50,
      "opacity": 1,
      "overflow": "hidden",
      "position": "relative",
      "width": 50,
    }
  }
  testID="testing"
/>
`;

exports[`<Avatar /> should handle string image URI correctly 1`] = `
<View
  accessibilityLabel=""
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": true,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={false}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    {
      "borderColor": "#4255EF",
      "borderRadius": 25,
      "borderWidth": 2,
      "height": 50,
      "opacity": 1,
      "overflow": "hidden",
      "position": "relative",
      "width": 50,
    }
  }
  testID="testing"
/>
`;

exports[`<Avatar /> should not display monogram when displayMonogram is false 1`] = `
<View
  accessibilityLabel=""
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": true,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={false}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    {
      "borderColor": "#4255EF",
      "borderRadius": 25,
      "borderWidth": 2,
      "height": 50,
      "opacity": 1,
      "overflow": "hidden",
      "position": "relative",
      "width": 50,
    }
  }
  testID="testing"
/>
`;

exports[`<Avatar /> should render Avatar 1`] = `
<View
  accessibilityLabel=""
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": true,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={false}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    {
      "borderColor": "#4255EF",
      "borderRadius": 25,
      "borderWidth": 2,
      "height": 50,
      "opacity": 1,
      "overflow": "hidden",
      "position": "relative",
      "width": 50,
    }
  }
  testID="testing"
/>
`;

exports[`<Avatar /> should render Avatar with all custom props 1`] = `
<View
  accessibilityLabel="testing"
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": true,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={false}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    {
      "borderColor": "#2ecc71",
      "borderRadius": 12,
      "borderWidth": 1,
      "height": 24,
      "opacity": 1,
      "overflow": "hidden",
      "position": "relative",
      "width": 24,
    }
  }
  testID="testing"
/>
`;

exports[`<Avatar /> should render Avatar with border 1`] = `
<View
  accessibilityLabel=""
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": true,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={false}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    {
      "borderColor": "#4255EF",
      "borderRadius": 25,
      "borderWidth": 2,
      "height": 50,
      "opacity": 1,
      "overflow": "hidden",
      "position": "relative",
      "width": 50,
    }
  }
  testID="testing"
/>
`;

exports[`<Avatar /> should render Avatar with custom accessibility label 1`] = `
<View
  accessibilityLabel="testing"
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": true,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={false}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    {
      "borderColor": "#4255EF",
      "borderRadius": 25,
      "borderWidth": 2,
      "height": 50,
      "opacity": 1,
      "overflow": "hidden",
      "position": "relative",
      "width": 50,
    }
  }
  testID="testing"
/>
`;

exports[`<Avatar /> should render Avatar with custom border 1`] = `
<View
  accessibilityLabel=""
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": true,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={false}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    {
      "borderColor": "#2ecc71",
      "borderRadius": 25,
      "borderWidth": 1,
      "height": 50,
      "opacity": 1,
      "overflow": "hidden",
      "position": "relative",
      "width": 50,
    }
  }
  testID="testing"
/>
`;

exports[`<Avatar /> should render Avatar with custom image 1`] = `
<View
  accessibilityLabel=""
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": true,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={false}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    {
      "borderColor": "#4255EF",
      "borderRadius": 25,
      "borderWidth": 2,
      "height": 50,
      "opacity": 1,
      "overflow": "hidden",
      "position": "relative",
      "width": 50,
    }
  }
  testID="testing"
/>
`;

exports[`<Avatar /> should render Avatar with custom size 1`] = `
<View
  accessibilityLabel=""
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": true,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={false}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    {
      "borderColor": "#4255EF",
      "borderRadius": 12,
      "borderWidth": 2,
      "height": 24,
      "opacity": 1,
      "overflow": "hidden",
      "position": "relative",
      "width": 24,
    }
  }
  testID="testing"
/>
`;

exports[`<Avatar /> should render Avatar with custom test id 1`] = `
<View
  accessibilityLabel=""
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": true,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={false}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    {
      "borderColor": "#4255EF",
      "borderRadius": 25,
      "borderWidth": 2,
      "height": 50,
      "opacity": 1,
      "overflow": "hidden",
      "position": "relative",
      "width": 50,
    }
  }
  testID="testId"
/>
`;

exports[`<Avatar /> should render Avatar with external image 1`] = `
<View
  accessibilityLabel=""
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": true,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={false}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    {
      "borderColor": "#4255EF",
      "borderRadius": 25,
      "borderWidth": 2,
      "height": 50,
      "opacity": 1,
      "overflow": "hidden",
      "position": "relative",
      "width": 50,
    }
  }
  testID="testing"
>
  <View
    style={
      [
        {},
      ]
    }
  >
    <View
      style={
        [
          {
            "overflow": "hidden",
          },
          {
            "height": "101%",
            "width": "101%",
          },
        ]
      }
    >
      <Image
        onLoad={[Function]}
        onLoadStart={[Function]}
        resizeMode="cover"
        source={
          {
            "uri": "https://avatars.githubusercontent.com/u/4726921?v=4",
          }
        }
        style={
          [
            {
              "bottom": 0,
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
            },
            {
              "tintColor": undefined,
            },
          ]
        }
      />
    </View>
  </View>
</View>
`;

exports[`<Avatar /> should render Avatar with monogram 1`] = `
<View
  accessibilityLabel=""
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": true,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={false}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    {
      "borderColor": "#4255EF",
      "borderRadius": 25,
      "borderWidth": 2,
      "height": 50,
      "opacity": 1,
      "overflow": "hidden",
      "position": "relative",
      "width": 50,
    }
  }
  testID="testing"
>
  <View
    size={50}
    style={
      [
        {
          "alignItems": "center",
          "backgroundColor": "",
          "height": 50,
          "justifyContent": "center",
          "position": "absolute",
          "textAlign": "center",
          "width": 50,
          "zIndex": 3,
        },
      ]
    }
  >
    <Text
      accessibilityLabel="BT"
      lineHeightVariant="min"
      size={50}
      style={
        [
          {
            "color": "#444444",
            "fontSize": 15,
            "lineHeight": 18,
          },
          {
            "alignSelf": "center",
            "color": "#444444",
            "fontSize": 22.5,
            "letterSpacing": 1.3,
            "lineHeight": 22.5,
            "position": "relative",
            "textAlign": "center",
            "top": 3,
          },
        ]
      }
      variant="md"
    >
      BT
    </Text>
  </View>
</View>
`;

exports[`<Avatar /> should render Avatar with styled monogram 1`] = `
<View
  accessibilityLabel=""
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": true,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={false}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    {
      "borderColor": "#4255EF",
      "borderRadius": 25,
      "borderWidth": 2,
      "height": 50,
      "opacity": 1,
      "overflow": "hidden",
      "position": "relative",
      "width": 50,
    }
  }
  testID="testing"
>
  <View
    size={50}
    style={
      [
        {
          "alignItems": "center",
          "backgroundColor": "",
          "height": 50,
          "justifyContent": "center",
          "position": "absolute",
          "textAlign": "center",
          "width": 50,
          "zIndex": 3,
        },
      ]
    }
  >
    <Text
      accessibilityLabel="BT"
      lineHeightVariant="min"
      size={50}
      style={
        [
          {
            "color": "#444444",
            "fontSize": 15,
            "lineHeight": 18,
          },
          {
            "alignSelf": "center",
            "color": "#444444",
            "fontSize": 22.5,
            "letterSpacing": 1.3,
            "lineHeight": 22.5,
            "position": "relative",
            "textAlign": "center",
            "top": 3,
          },
          {
            "backgroundColor": "#2ecc71",
          },
        ]
      }
      variant="md"
    >
      BT
    </Text>
  </View>
</View>
`;
