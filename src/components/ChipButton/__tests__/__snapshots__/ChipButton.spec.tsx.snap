// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ChipButton /> should render Chipbutton 1`] = `
<View
  accessibilityLabel=""
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": false,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    {
      "borderRadius": 20,
      "opacity": 1,
    }
  }
  testID="testing"
>
  <View
    buttonVariant="primary"
    disabled={false}
    flat={false}
    hasBorder={false}
    style={
      [
        {
          "//": 40,
          "alignItems": "center",
          "alignSelf": "center",
          "backgroundColor": "#fafafa",
          "borderColor": "#fafafa",
          "borderRadius": 40,
          "borderWidth": 0,
          "flexDirection": "row",
          "justifyContent": "center",
          "overflow": "hidden",
          "paddingHorizontal": 16,
          "paddingVertical": 8,
        },
        {},
      ]
    }
  >
    <Text
      accessibilityLabel="undefined"
      buttonVariant="primary"
      disabled={false}
      flat={false}
      lineHeightVariant="min"
      style={
        [
          {
            "color": "#444444",
            "fontSize": 15,
            "lineHeight": 18,
          },
          {
            "color": "#444444",
            "fontWeight": "bold",
            "letterSpacing": -0.41,
          },
          {},
        ]
      }
      variant="md"
    />
  </View>
</View>
`;

exports[`<ChipButton /> should render Chipbutton when rounded 1`] = `
<View
  accessibilityLabel=""
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": false,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    {
      "borderRadius": 20,
      "opacity": 1,
    }
  }
  testID="testing"
>
  <View
    buttonVariant="primary"
    disabled={false}
    flat={false}
    hasBorder={false}
    rounded={true}
    style={
      [
        {
          "//": 40,
          "alignItems": "center",
          "alignSelf": "center",
          "backgroundColor": "#fafafa",
          "borderColor": "#fafafa",
          "borderRadius": 40,
          "borderWidth": 0,
          "flexDirection": "row",
          "justifyContent": "center",
          "overflow": "hidden",
          "paddingHorizontal": 16,
          "paddingVertical": 8,
        },
        {},
      ]
    }
  >
    <Text
      accessibilityLabel="undefined"
      buttonVariant="primary"
      disabled={false}
      flat={false}
      lineHeightVariant="min"
      style={
        [
          {
            "color": "#444444",
            "fontSize": 15,
            "lineHeight": 18,
          },
          {
            "color": "#444444",
            "fontWeight": "bold",
            "letterSpacing": -0.41,
          },
          {},
        ]
      }
      variant="md"
    />
  </View>
</View>
`;

exports[`<ChipButton /> should render Chipbutton with children 1`] = `
<View
  accessibilityLabel=""
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": false,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    {
      "borderRadius": 20,
      "opacity": 1,
    }
  }
  testID="testing"
>
  <View
    buttonVariant="primary"
    disabled={false}
    flat={false}
    hasBorder={false}
    style={
      [
        {
          "//": 40,
          "alignItems": "center",
          "alignSelf": "center",
          "backgroundColor": "#fafafa",
          "borderColor": "#fafafa",
          "borderRadius": 40,
          "borderWidth": 0,
          "flexDirection": "row",
          "justifyContent": "center",
          "overflow": "hidden",
          "paddingHorizontal": 16,
          "paddingVertical": 8,
        },
        {},
      ]
    }
  >
    <Text
      accessibilityLabel="[object Object]"
      buttonVariant="primary"
      disabled={false}
      flat={false}
      lineHeightVariant="min"
      style={
        [
          {
            "color": "#444444",
            "fontSize": 15,
            "lineHeight": 18,
          },
          {
            "color": "#444444",
            "fontWeight": "bold",
            "letterSpacing": -0.41,
          },
          {},
        ]
      }
      variant="md"
    >
      <Text
        accessibilityLabel="Test"
        lineHeightVariant="min"
        style={
          [
            {
              "color": "#444444",
              "fontSize": 15,
              "lineHeight": 18,
            },
          ]
        }
        testID="Test"
        variant="md"
      >
        Test
      </Text>
    </Text>
  </View>
</View>
`;

exports[`<ChipButton /> should render Chipbutton with contrast 1`] = `
<View
  accessibilityLabel=""
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": false,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    {
      "borderRadius": 20,
      "opacity": 1,
    }
  }
  testID="testing"
>
  <View
    buttonVariant="primary"
    disabled={false}
    flat={false}
    hasBorder={false}
    style={
      [
        {
          "//": 40,
          "alignItems": "center",
          "alignSelf": "center",
          "backgroundColor": "#fafafa",
          "borderColor": "#fafafa",
          "borderRadius": 40,
          "borderWidth": 0,
          "flexDirection": "row",
          "justifyContent": "center",
          "overflow": "hidden",
          "paddingHorizontal": 16,
          "paddingVertical": 8,
        },
        {},
      ]
    }
  >
    <Text
      accessibilityLabel="undefined"
      buttonVariant="primary"
      disabled={false}
      flat={false}
      lineHeightVariant="min"
      style={
        [
          {
            "color": "#444444",
            "fontSize": 15,
            "lineHeight": 18,
          },
          {
            "color": "#444444",
            "fontWeight": "bold",
            "letterSpacing": -0.41,
          },
          {},
        ]
      }
      variant="md"
    />
  </View>
</View>
`;

exports[`<ChipButton /> should render Chipbutton with custom accessibility label 1`] = `
<View
  accessibilityLabel="testing"
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": false,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    {
      "borderRadius": 20,
      "opacity": 1,
    }
  }
  testID="testing"
>
  <View
    buttonVariant="primary"
    disabled={false}
    flat={false}
    hasBorder={false}
    style={
      [
        {
          "//": 40,
          "alignItems": "center",
          "alignSelf": "center",
          "backgroundColor": "#fafafa",
          "borderColor": "#fafafa",
          "borderRadius": 40,
          "borderWidth": 0,
          "flexDirection": "row",
          "justifyContent": "center",
          "overflow": "hidden",
          "paddingHorizontal": 16,
          "paddingVertical": 8,
        },
        {},
      ]
    }
  >
    <Text
      accessibilityLabel="undefined"
      buttonVariant="primary"
      disabled={false}
      flat={false}
      lineHeightVariant="min"
      style={
        [
          {
            "color": "#444444",
            "fontSize": 15,
            "lineHeight": 18,
          },
          {
            "color": "#444444",
            "fontWeight": "bold",
            "letterSpacing": -0.41,
          },
          {},
        ]
      }
      variant="md"
    />
  </View>
</View>
`;

exports[`<ChipButton /> should render Chipbutton with custom style 1`] = `
<View
  accessibilityLabel=""
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": false,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    {
      "borderRadius": 20,
      "opacity": 1,
    }
  }
  testID="testing"
>
  <View
    buttonVariant="primary"
    disabled={false}
    flat={false}
    hasBorder={false}
    style={
      [
        {
          "//": 40,
          "alignItems": "center",
          "alignSelf": "center",
          "backgroundColor": "#fafafa",
          "borderColor": "#fafafa",
          "borderRadius": 40,
          "borderWidth": 0,
          "flexDirection": "row",
          "justifyContent": "center",
          "overflow": "hidden",
          "paddingHorizontal": 16,
          "paddingVertical": 8,
        },
        {
          "backgroundColor": "#2980b9",
        },
      ]
    }
  >
    <Text
      accessibilityLabel="undefined"
      buttonVariant="primary"
      disabled={false}
      flat={false}
      lineHeightVariant="min"
      style={
        [
          {
            "color": "#444444",
            "fontSize": 15,
            "lineHeight": 18,
          },
          {
            "color": "#444444",
            "fontWeight": "bold",
            "letterSpacing": -0.41,
          },
          {},
        ]
      }
      variant="md"
    />
  </View>
</View>
`;

exports[`<ChipButton /> should render Chipbutton with custom text style 1`] = `
<View
  accessibilityLabel=""
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": false,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    {
      "borderRadius": 20,
      "opacity": 1,
    }
  }
  testID="testing"
>
  <View
    buttonVariant="primary"
    disabled={false}
    flat={false}
    hasBorder={false}
    style={
      [
        {
          "//": 40,
          "alignItems": "center",
          "alignSelf": "center",
          "backgroundColor": "#fafafa",
          "borderColor": "#fafafa",
          "borderRadius": 40,
          "borderWidth": 0,
          "flexDirection": "row",
          "justifyContent": "center",
          "overflow": "hidden",
          "paddingHorizontal": 16,
          "paddingVertical": 8,
        },
        {},
      ]
    }
  >
    <Text
      accessibilityLabel="undefined"
      buttonVariant="primary"
      disabled={false}
      flat={false}
      lineHeightVariant="min"
      style={
        [
          {
            "color": "#444444",
            "fontSize": 15,
            "lineHeight": 18,
          },
          {
            "color": "#444444",
            "fontWeight": "bold",
            "letterSpacing": -0.41,
          },
          {
            "color": "#2980b9",
          },
        ]
      }
      variant="md"
    />
  </View>
</View>
`;

exports[`<ChipButton /> should render Chipbutton with disabled 1`] = `
<View
  accessibilityLabel=""
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": true,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    {
      "borderRadius": 20,
      "opacity": 1,
    }
  }
  testID="testing"
>
  <View
    buttonVariant="primary"
    disabled={true}
    flat={false}
    hasBorder={false}
    style={
      [
        {
          "//": 40,
          "alignItems": "center",
          "alignSelf": "center",
          "backgroundColor": "#4255EF70",
          "borderColor": "#4255EF70",
          "borderRadius": 40,
          "borderWidth": 0,
          "flexDirection": "row",
          "justifyContent": "center",
          "overflow": "hidden",
          "paddingHorizontal": 16,
          "paddingVertical": 8,
        },
        {},
      ]
    }
  >
    <Text
      accessibilityLabel="undefined"
      buttonVariant="primary"
      disabled={true}
      flat={false}
      lineHeightVariant="min"
      style={
        [
          {
            "color": "#444444",
            "fontSize": 15,
            "lineHeight": 18,
          },
          {
            "color": "#ffffff",
            "fontWeight": "bold",
            "letterSpacing": -0.41,
          },
          {},
        ]
      }
      variant="md"
    />
  </View>
</View>
`;

exports[`<ChipButton /> should render Chipbutton with loading 1`] = `
<View
  accessibilityLabel=""
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": true,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    {
      "borderRadius": 20,
      "opacity": 1,
    }
  }
  testID="testing"
>
  <View
    buttonVariant="primary"
    disabled={false}
    flat={false}
    hasBorder={false}
    style={
      [
        {
          "//": 40,
          "alignItems": "center",
          "alignSelf": "center",
          "backgroundColor": "#fafafa",
          "borderColor": "#fafafa",
          "borderRadius": 40,
          "borderWidth": 0,
          "flexDirection": "row",
          "justifyContent": "center",
          "overflow": "hidden",
          "paddingHorizontal": 16,
          "paddingVertical": 8,
        },
        {},
      ]
    }
  >
    <View
      style={
        [
          {
            "aspectRatio": 1,
          },
          undefined,
          [
            {},
            {
              "alignSelf": "center",
              "width": 55,
            },
          ],
        ]
      }
    >
      <View
        accessibilityLabel="Aguarde"
        cacheComposition={true}
        collapsable={false}
        colorFilters={[]}
        contrast={false}
        enableMergePathsAndroidForKitKatAndAbove={false}
        forwardedRef={[Function]}
        loop={true}
        onAnimationFinish={[Function]}
        progress={0}
        resizeMode="contain"
        sourceJson="{"v":"5.5.5","fr":60,"ip":0,"op":60,"w":375,"h":375,"nm":"dots-loader","ddd":0,"assets":[],"layers":[{"ddd":0,"ind":1,"ty":4,"nm":"Shape Layer 3","sr":1,"ks":{"o":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":20,"s":[100]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":40,"s":[70]},{"t":60,"s":[99]}],"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[250,187,0],"ix":2},"a":{"a":0,"k":[-101.84,-18.84,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"d":1,"ty":"el","s":{"a":0,"k":[43.32,43.32],"ix":2},"p":{"a":0,"k":[0,0],"ix":3},"nm":"Ellipse Path 1","mn":"ADBE Vector Shape - Ellipse","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[-100.84,-18.84],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Ellipse 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":180,"st":0,"bm":0},{"ddd":0,"ind":2,"ty":4,"nm":"Shape Layer 2","sr":1,"ks":{"o":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":10,"s":[100]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":30,"s":[60]},{"t":50,"s":[100]}],"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[187,187,0],"ix":2},"a":{"a":0,"k":[-100.84,-18.84,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"d":1,"ty":"el","s":{"a":0,"k":[43.32,43.32],"ix":2},"p":{"a":0,"k":[0,0],"ix":3},"nm":"Ellipse Path 1","mn":"ADBE Vector Shape - Ellipse","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[-100.84,-18.84],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Ellipse 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":180,"st":0,"bm":0},{"ddd":0,"ind":3,"ty":4,"nm":"Shape Layer 1","sr":1,"ks":{"o":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":0,"s":[100]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":20,"s":[60]},{"t":40,"s":[100]}],"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[123,187,0],"ix":2},"a":{"a":0,"k":[-100.84,-18.84,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"d":1,"ty":"el","s":{"a":0,"k":[43.32,43.32],"ix":2},"p":{"a":0,"k":[0,0],"ix":3},"nm":"Ellipse Path 1","mn":"ADBE Vector Shape - Ellipse","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[-100.84,-18.84],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Ellipse 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":180,"st":0,"bm":0}],"markers":[]}"
        speed={1}
        style={
          {
            "alignSelf": "center",
            "aspectRatio": 1,
            "height": "100%",
            "width": 55,
          }
        }
        textFiltersAndroid={[]}
        textFiltersIOS={[]}
        useNativeLooping={false}
        variant="button"
      />
    </View>
  </View>
</View>
`;

exports[`<ChipButton /> should render Chipbutton with test id 1`] = `
<View
  accessibilityLabel=""
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": false,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    {
      "borderRadius": 20,
      "opacity": 1,
    }
  }
  testID="test"
>
  <View
    buttonVariant="primary"
    disabled={false}
    flat={false}
    hasBorder={false}
    style={
      [
        {
          "//": 40,
          "alignItems": "center",
          "alignSelf": "center",
          "backgroundColor": "#fafafa",
          "borderColor": "#fafafa",
          "borderRadius": 40,
          "borderWidth": 0,
          "flexDirection": "row",
          "justifyContent": "center",
          "overflow": "hidden",
          "paddingHorizontal": 16,
          "paddingVertical": 8,
        },
        {},
      ]
    }
  >
    <Text
      accessibilityLabel="undefined"
      buttonVariant="primary"
      disabled={false}
      flat={false}
      lineHeightVariant="min"
      style={
        [
          {
            "color": "#444444",
            "fontSize": 15,
            "lineHeight": 18,
          },
          {
            "color": "#444444",
            "fontWeight": "bold",
            "letterSpacing": -0.41,
          },
          {},
        ]
      }
      variant="md"
    />
  </View>
</View>
`;

exports[`<ChipButton /> should render Chipbutton with variant 1`] = `
<View
  accessibilityLabel=""
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": false,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    {
      "borderRadius": 20,
      "opacity": 1,
    }
  }
  testID="testing"
>
  <View
    buttonVariant="secondary"
    disabled={false}
    flat={false}
    hasBorder={false}
    style={
      [
        {
          "//": 40,
          "alignItems": "center",
          "alignSelf": "center",
          "backgroundColor": "#42ADEF",
          "borderColor": "#42ADEF",
          "borderRadius": 40,
          "borderWidth": 0,
          "flexDirection": "row",
          "justifyContent": "center",
          "overflow": "hidden",
          "paddingHorizontal": 16,
          "paddingVertical": 8,
        },
        {},
      ]
    }
  >
    <Text
      accessibilityLabel="undefined"
      buttonVariant="secondary"
      disabled={false}
      flat={false}
      lineHeightVariant="min"
      style={
        [
          {
            "color": "#444444",
            "fontSize": 15,
            "lineHeight": 18,
          },
          {
            "color": "#ffffff",
            "fontWeight": "bold",
            "letterSpacing": -0.41,
          },
          {},
        ]
      }
      variant="md"
    />
  </View>
</View>
`;
